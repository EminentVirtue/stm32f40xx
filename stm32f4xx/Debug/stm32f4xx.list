
stm32f4xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08002540  08002540  00003540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026bc  080026bc  00004064  2**0
                  CONTENTS
  4 .ARM          00000008  080026bc  080026bc  000036bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026c4  080026c4  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c4  080026c4  000036c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080026cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004064  2**0
                  CONTENTS
 10 .bss          00000218  20000064  20000064  00004064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  00004064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002023  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000070b  00000000  00000000  000060b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  000067c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000018b  00000000  00000000  000069d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d47  00000000  00000000  00006b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026f0  00000000  00000000  000098a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b6b7  00000000  00000000  0000bf92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00017649  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000014b8  00000000  00000000  0001768c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00018b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002528 	.word	0x08002528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08002528 	.word	0x08002528

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <GPIO_Init>:
 * @return 			- none
 */


void GPIO_Init(GPIO_Handle_t *pHandle)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	GPIO_RegDef_t* pGPIOx = pHandle->pGPIOPad;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	617b      	str	r3, [r7, #20]
	uint8_t pin_number = pHandle->config.pin_number;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	799b      	ldrb	r3, [r3, #6]
 8000292:	74fb      	strb	r3, [r7, #19]

	GPIO_PeripheralClockControl(pGPIOx, ENABLE);
 8000294:	2101      	movs	r1, #1
 8000296:	6978      	ldr	r0, [r7, #20]
 8000298:	f000 f872 	bl	8000380 <GPIO_PeripheralClockControl>

	/* Configure mode */
	if(pHandle->config.mode_type ==  GPIO_MODE_ALTERNATE)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	795b      	ldrb	r3, [r3, #5]
 80002a0:	2b02      	cmp	r3, #2
 80002a2:	d12d      	bne.n	8000300 <GPIO_Init+0x80>
	{
		pGPIOx->MODER |= ( pHandle->config.mode_type << ( 2 * pin_number) );
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	7952      	ldrb	r2, [r2, #5]
 80002ac:	4611      	mov	r1, r2
 80002ae:	7cfa      	ldrb	r2, [r7, #19]
 80002b0:	0052      	lsls	r2, r2, #1
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	431a      	orrs	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	601a      	str	r2, [r3, #0]

		/* Determine if the alternate low or high register should be configured */
		if (pHandle->config.pin_number < 8)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	799b      	ldrb	r3, [r3, #6]
 80002c0:	2b07      	cmp	r3, #7
 80002c2:	d80e      	bhi.n	80002e2 <GPIO_Init+0x62>
		{
			uint32_t temp_reg = ( pHandle->config.alternate_mode_type << (4 * pin_number) );
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	79db      	ldrb	r3, [r3, #7]
 80002c8:	461a      	mov	r2, r3
 80002ca:	7cfb      	ldrb	r3, [r7, #19]
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	fa02 f303 	lsl.w	r3, r2, r3
 80002d2:	60bb      	str	r3, [r7, #8]
			pGPIOx->AFRL |= temp_reg;
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	6a1a      	ldr	r2, [r3, #32]
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	431a      	orrs	r2, r3
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	621a      	str	r2, [r3, #32]
 80002e0:	e01a      	b.n	8000318 <GPIO_Init+0x98>
		}
		else
		{
			uint32_t temp_reg = (pHandle->config.alternate_mode_type << (4 * pin_number ) );
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	79db      	ldrb	r3, [r3, #7]
 80002e6:	461a      	mov	r2, r3
 80002e8:	7cfb      	ldrb	r3, [r7, #19]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	fa02 f303 	lsl.w	r3, r2, r3
 80002f0:	60fb      	str	r3, [r7, #12]
			pGPIOx->AFRH |= temp_reg;
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80002fe:	e00b      	b.n	8000318 <GPIO_Init+0x98>

		}
	}
	else
	{
		pGPIOx->MODER |= ( pHandle->config.mode_type << (2 * pin_number));
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	7952      	ldrb	r2, [r2, #5]
 8000308:	4611      	mov	r1, r2
 800030a:	7cfa      	ldrb	r2, [r7, #19]
 800030c:	0052      	lsls	r2, r2, #1
 800030e:	fa01 f202 	lsl.w	r2, r1, r2
 8000312:	431a      	orrs	r2, r3
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	601a      	str	r2, [r3, #0]
	}

	/* Configure speed */
	pGPIOx->OSPEEDR |= ( pHandle->config.output_speed << pin_number);
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	7912      	ldrb	r2, [r2, #4]
 8000320:	4611      	mov	r1, r2
 8000322:	7cfa      	ldrb	r2, [r7, #19]
 8000324:	fa01 f202 	lsl.w	r2, r1, r2
 8000328:	431a      	orrs	r2, r3
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	609a      	str	r2, [r3, #8]

	/* Configure output type */
	if(pHandle->config.mode_type != GPIO_MODE_INPUT)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	795b      	ldrb	r3, [r3, #5]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d00a      	beq.n	800034c <GPIO_Init+0xcc>
	{
		pGPIOx->OTYPER |= (pHandle->config.output_type << pin_number);
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	7a12      	ldrb	r2, [r2, #8]
 800033e:	4611      	mov	r1, r2
 8000340:	7cfa      	ldrb	r2, [r7, #19]
 8000342:	fa01 f202 	lsl.w	r2, r1, r2
 8000346:	431a      	orrs	r2, r3
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	605a      	str	r2, [r3, #4]
	}

	/* Configure pull-up/down register */
	pGPIOx->PUPDR |= (pHandle->config.PUPD << pin_number);
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	7a92      	ldrb	r2, [r2, #10]
 8000354:	4611      	mov	r1, r2
 8000356:	7cfa      	ldrb	r2, [r7, #19]
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	431a      	orrs	r2, r3
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	60da      	str	r2, [r3, #12]

	/* If open drain is enabled, configure the initial state of the pin */
	if(pHandle->config.mode_type == GPIO_OPEN_DRAIN)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	795b      	ldrb	r3, [r3, #5]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d106      	bne.n	8000378 <GPIO_Init+0xf8>
	{
		GPIO_WriteToPin(pGPIOx, pin_number, pHandle->config.od_state_init);
 800036a:	7cf9      	ldrb	r1, [r7, #19]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	7a5b      	ldrb	r3, [r3, #9]
 8000370:	461a      	mov	r2, r3
 8000372:	6978      	ldr	r0, [r7, #20]
 8000374:	f000 f8e0 	bl	8000538 <GPIO_WriteToPin>
	}
}
 8000378:	bf00      	nop
 800037a:	3718      	adds	r7, #24
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <GPIO_PeripheralClockControl>:
		GPIOI_PCLK_DN;
	}

}
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t status)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
	if(pGPIOx == GPIOA)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a60      	ldr	r2, [pc, #384]	@ (8000510 <GPIO_PeripheralClockControl+0x190>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d110      	bne.n	80003b6 <GPIO_PeripheralClockControl+0x36>
	{
		status == ENABLE ? GPIOA_PCLK_EN : GPIOA_PCLK_DN;
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d106      	bne.n	80003a8 <GPIO_PeripheralClockControl+0x28>
 800039a:	4b5e      	ldr	r3, [pc, #376]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039e:	4a5d      	ldr	r2, [pc, #372]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	else if(pGPIOx == GPIOI)
	{
		status == ENABLE ? GPIOI_PCLK_EN : GPIOI_PCLK_DN;
	}
}
 80003a6:	e0ad      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
		status == ENABLE ? GPIOA_PCLK_EN : GPIOA_PCLK_DN;
 80003a8:	4b5a      	ldr	r3, [pc, #360]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	4a59      	ldr	r2, [pc, #356]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80003ae:	f023 0301 	bic.w	r3, r3, #1
 80003b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b4:	e0a6      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
	else if(pGPIOx == GPIOB)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a57      	ldr	r2, [pc, #348]	@ (8000518 <GPIO_PeripheralClockControl+0x198>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d110      	bne.n	80003e0 <GPIO_PeripheralClockControl+0x60>
		status == ENABLE ? GPIOB_PCLK_EN : GPIOB_PCLK_DN;
 80003be:	78fb      	ldrb	r3, [r7, #3]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeripheralClockControl+0x52>
 80003c4:	4b53      	ldr	r3, [pc, #332]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c8:	4a52      	ldr	r2, [pc, #328]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80003ca:	f043 0302 	orr.w	r3, r3, #2
 80003ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d0:	e098      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
		status == ENABLE ? GPIOB_PCLK_EN : GPIOB_PCLK_DN;
 80003d2:	4b50      	ldr	r3, [pc, #320]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d6:	4a4f      	ldr	r2, [pc, #316]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80003d8:	f023 0302 	bic.w	r3, r3, #2
 80003dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003de:	e091      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
	else if(pGPIOx == GPIOC)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a4e      	ldr	r2, [pc, #312]	@ (800051c <GPIO_PeripheralClockControl+0x19c>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d110      	bne.n	800040a <GPIO_PeripheralClockControl+0x8a>
		status == ENABLE ? GPIOC_PCLK_EN : GPIOC_PCLK_DN;
 80003e8:	78fb      	ldrb	r3, [r7, #3]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d106      	bne.n	80003fc <GPIO_PeripheralClockControl+0x7c>
 80003ee:	4b49      	ldr	r3, [pc, #292]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a48      	ldr	r2, [pc, #288]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fa:	e083      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
		status == ENABLE ? GPIOC_PCLK_EN : GPIOC_PCLK_DN;
 80003fc:	4b45      	ldr	r3, [pc, #276]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000400:	4a44      	ldr	r2, [pc, #272]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 8000402:	f023 0304 	bic.w	r3, r3, #4
 8000406:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000408:	e07c      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
	else if(pGPIOx == GPIOD)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a44      	ldr	r2, [pc, #272]	@ (8000520 <GPIO_PeripheralClockControl+0x1a0>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d110      	bne.n	8000434 <GPIO_PeripheralClockControl+0xb4>
		status == ENABLE ? GPIOD_PCLK_EN : GPIOD_PCLK_DN;
 8000412:	78fb      	ldrb	r3, [r7, #3]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d106      	bne.n	8000426 <GPIO_PeripheralClockControl+0xa6>
 8000418:	4b3e      	ldr	r3, [pc, #248]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041c:	4a3d      	ldr	r2, [pc, #244]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000424:	e06e      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
		status == ENABLE ? GPIOD_PCLK_EN : GPIOD_PCLK_DN;
 8000426:	4b3b      	ldr	r3, [pc, #236]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042a:	4a3a      	ldr	r2, [pc, #232]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 800042c:	f023 0308 	bic.w	r3, r3, #8
 8000430:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000432:	e067      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
	else if(pGPIOx == GPIOE)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a3b      	ldr	r2, [pc, #236]	@ (8000524 <GPIO_PeripheralClockControl+0x1a4>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d110      	bne.n	800045e <GPIO_PeripheralClockControl+0xde>
		status == ENABLE ? GPIOE_PCLK_EN : GPIOE_PCLK_DN;
 800043c:	78fb      	ldrb	r3, [r7, #3]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d106      	bne.n	8000450 <GPIO_PeripheralClockControl+0xd0>
 8000442:	4b34      	ldr	r3, [pc, #208]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000446:	4a33      	ldr	r2, [pc, #204]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 8000448:	f043 0310 	orr.w	r3, r3, #16
 800044c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800044e:	e059      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
		status == ENABLE ? GPIOE_PCLK_EN : GPIOE_PCLK_DN;
 8000450:	4b30      	ldr	r3, [pc, #192]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000454:	4a2f      	ldr	r2, [pc, #188]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 8000456:	f023 0310 	bic.w	r3, r3, #16
 800045a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045c:	e052      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
	else if(pGPIOx == GPIOF)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a31      	ldr	r2, [pc, #196]	@ (8000528 <GPIO_PeripheralClockControl+0x1a8>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d110      	bne.n	8000488 <GPIO_PeripheralClockControl+0x108>
		status == ENABLE ? GPIOF_PCLK_EN : GPIOF_PCLK_DN;
 8000466:	78fb      	ldrb	r3, [r7, #3]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d106      	bne.n	800047a <GPIO_PeripheralClockControl+0xfa>
 800046c:	4b29      	ldr	r3, [pc, #164]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000470:	4a28      	ldr	r2, [pc, #160]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000478:	e044      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
		status == ENABLE ? GPIOF_PCLK_EN : GPIOF_PCLK_DN;
 800047a:	4b26      	ldr	r3, [pc, #152]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047e:	4a25      	ldr	r2, [pc, #148]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 8000480:	f023 0320 	bic.w	r3, r3, #32
 8000484:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000486:	e03d      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
	else if(pGPIOx == GPIOG)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a28      	ldr	r2, [pc, #160]	@ (800052c <GPIO_PeripheralClockControl+0x1ac>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d110      	bne.n	80004b2 <GPIO_PeripheralClockControl+0x132>
		status == ENABLE ? GPIOG_PCLK_EN : GPIOG_PCLK_DN;
 8000490:	78fb      	ldrb	r3, [r7, #3]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d106      	bne.n	80004a4 <GPIO_PeripheralClockControl+0x124>
 8000496:	4b1f      	ldr	r3, [pc, #124]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049a:	4a1e      	ldr	r2, [pc, #120]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 800049c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004a0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a2:	e02f      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
		status == ENABLE ? GPIOG_PCLK_EN : GPIOG_PCLK_DN;
 80004a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80004aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b0:	e028      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
	else if(pGPIOx == GPIOH)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000530 <GPIO_PeripheralClockControl+0x1b0>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d110      	bne.n	80004dc <GPIO_PeripheralClockControl+0x15c>
		status == ENABLE ? GPIOH_PCLK_EN : GPIOH_PCLK_DN;
 80004ba:	78fb      	ldrb	r3, [r7, #3]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d106      	bne.n	80004ce <GPIO_PeripheralClockControl+0x14e>
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a13      	ldr	r2, [pc, #76]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80004c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004cc:	e01a      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
		status == ENABLE ? GPIOH_PCLK_EN : GPIOH_PCLK_DN;
 80004ce:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a10      	ldr	r2, [pc, #64]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80004d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004da:	e013      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
	else if(pGPIOx == GPIOI)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <GPIO_PeripheralClockControl+0x1b4>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d10f      	bne.n	8000504 <GPIO_PeripheralClockControl+0x184>
		status == ENABLE ? GPIOI_PCLK_EN : GPIOI_PCLK_DN;
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d106      	bne.n	80004f8 <GPIO_PeripheralClockControl+0x178>
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	4a09      	ldr	r2, [pc, #36]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80004f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f6:	e005      	b.n	8000504 <GPIO_PeripheralClockControl+0x184>
		status == ENABLE ? GPIOI_PCLK_EN : GPIOI_PCLK_DN;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fc:	4a05      	ldr	r2, [pc, #20]	@ (8000514 <GPIO_PeripheralClockControl+0x194>)
 80004fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000502:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40020000 	.word	0x40020000
 8000514:	40023800 	.word	0x40023800
 8000518:	40020400 	.word	0x40020400
 800051c:	40020800 	.word	0x40020800
 8000520:	40020c00 	.word	0x40020c00
 8000524:	40020100 	.word	0x40020100
 8000528:	40020140 	.word	0x40020140
 800052c:	40020180 	.word	0x40020180
 8000530:	400201c0 	.word	0x400201c0
 8000534:	40020200 	.word	0x40020200

08000538 <GPIO_WriteToPin>:

void GPIO_WriteToPin(GPIO_RegDef_t* pGPIOx, uint32_t pin, uint8_t value)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	4613      	mov	r3, r2
 8000544:	71fb      	strb	r3, [r7, #7]
	if(value == GPIO_SET)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d109      	bne.n	8000560 <GPIO_WriteToPin+0x28>
	{
		pGPIOx->ODR |= (1 << pin);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	2101      	movs	r1, #1
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	fa01 f202 	lsl.w	r2, r1, r2
 8000558:	431a      	orrs	r2, r3
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	615a      	str	r2, [r3, #20]
	}
	else
	{
		pGPIOx->ODR &= ~(1 << pin);
	}
}
 800055e:	e009      	b.n	8000574 <GPIO_WriteToPin+0x3c>
		pGPIOx->ODR &= ~(1 << pin);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	2101      	movs	r1, #1
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	fa01 f202 	lsl.w	r2, r1, r2
 800056c:	43d2      	mvns	r2, r2
 800056e:	401a      	ands	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	615a      	str	r2, [r3, #20]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <SPI_PeripheralClockControl>:
 *
 * @param[in]         - SPI_RegDef_t *pSPIx - ptr to SPI peripheral
 * @param[in]		  - u8 enabled - 1 for enabled, 0 for disabled
 ********************************************************************/
void SPI_PeripheralClockControl(SPI_RegDef_t* pSPIx, u8 enabled)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
	if(pSPIx == SPI1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a43      	ldr	r2, [pc, #268]	@ (800069c <SPI_PeripheralClockControl+0x11c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d112      	bne.n	80005ba <SPI_PeripheralClockControl+0x3a>
	{
		enabled == ENABLE ? SPI1_PCLK_EN : SPI1_PCLK_DN;
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d106      	bne.n	80005a8 <SPI_PeripheralClockControl+0x28>
 800059a:	4b41      	ldr	r3, [pc, #260]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800059e:	4a40      	ldr	r2, [pc, #256]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 80005a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005a4:	6453      	str	r3, [r2, #68]	@ 0x44
	}
	else if(pSPIx == SPI6)
	{
		enabled == ENABLE ? SPI6_PCLK_EN : SPI6_PCLK_DN;
	}
}
 80005a6:	e072      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
		enabled == ENABLE ? SPI1_PCLK_EN : SPI1_PCLK_DN;
 80005a8:	4b3d      	ldr	r3, [pc, #244]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 80005aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ac:	4a3c      	ldr	r2, [pc, #240]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 80005ae:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80005b2:	f023 031f 	bic.w	r3, r3, #31
 80005b6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80005b8:	e069      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
	else if(pSPIx == SPI2)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a39      	ldr	r2, [pc, #228]	@ (80006a4 <SPI_PeripheralClockControl+0x124>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d112      	bne.n	80005e8 <SPI_PeripheralClockControl+0x68>
		enabled == ENABLE ? SPI2_PCLK_EN : SPI2_PCLK_DN;
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d106      	bne.n	80005d6 <SPI_PeripheralClockControl+0x56>
 80005c8:	4b35      	ldr	r3, [pc, #212]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a34      	ldr	r2, [pc, #208]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80005d4:	e05b      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
		enabled == ENABLE ? SPI2_PCLK_EN : SPI2_PCLK_DN;
 80005d6:	4b32      	ldr	r3, [pc, #200]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005da:	4a31      	ldr	r2, [pc, #196]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 80005dc:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80005e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80005e4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80005e6:	e052      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
	else if(pSPIx == SPI3)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a2f      	ldr	r2, [pc, #188]	@ (80006a8 <SPI_PeripheralClockControl+0x128>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d110      	bne.n	8000612 <SPI_PeripheralClockControl+0x92>
		enabled == ENABLE ? SPI3_PCLK_EN : SPI3_PCLK_DN;
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d106      	bne.n	8000604 <SPI_PeripheralClockControl+0x84>
 80005f6:	4b2a      	ldr	r3, [pc, #168]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 80005f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fa:	4a29      	ldr	r2, [pc, #164]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 80005fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000600:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000602:	e044      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
		enabled == ENABLE ? SPI3_PCLK_EN : SPI3_PCLK_DN;
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a25      	ldr	r2, [pc, #148]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 800060a:	0c1b      	lsrs	r3, r3, #16
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000610:	e03d      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
	else if(pSPIx == SPI4)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a25      	ldr	r2, [pc, #148]	@ (80006ac <SPI_PeripheralClockControl+0x12c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d110      	bne.n	800063c <SPI_PeripheralClockControl+0xbc>
		enabled == ENABLE ? SPI4_PCLK_EN : SPI5_PCLK_DN;
 800061a:	78fb      	ldrb	r3, [r7, #3]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d106      	bne.n	800062e <SPI_PeripheralClockControl+0xae>
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 8000622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000624:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 8000626:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800062a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800062c:	e02f      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
		enabled == ENABLE ? SPI4_PCLK_EN : SPI5_PCLK_DN;
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 8000630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000632:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 8000634:	0d5b      	lsrs	r3, r3, #21
 8000636:	055b      	lsls	r3, r3, #21
 8000638:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800063a:	e028      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
	else if(pSPIx == SPI5)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a1c      	ldr	r2, [pc, #112]	@ (80006b0 <SPI_PeripheralClockControl+0x130>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d110      	bne.n	8000666 <SPI_PeripheralClockControl+0xe6>
		enabled == ENABLE ? SPI5_PCLK_EN : SPI5_PCLK_DN;
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d106      	bne.n	8000658 <SPI_PeripheralClockControl+0xd8>
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064e:	4a14      	ldr	r2, [pc, #80]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000654:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000656:	e01a      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
		enabled == ENABLE ? SPI5_PCLK_EN : SPI5_PCLK_DN;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 800065a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800065c:	4a10      	ldr	r2, [pc, #64]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 800065e:	0d5b      	lsrs	r3, r3, #21
 8000660:	055b      	lsls	r3, r3, #21
 8000662:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000664:	e013      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
	else if(pSPIx == SPI6)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <SPI_PeripheralClockControl+0x134>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d10f      	bne.n	800068e <SPI_PeripheralClockControl+0x10e>
		enabled == ENABLE ? SPI6_PCLK_EN : SPI6_PCLK_DN;
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d106      	bne.n	8000682 <SPI_PeripheralClockControl+0x102>
 8000674:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 8000676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000678:	4a09      	ldr	r2, [pc, #36]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 800067a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800067e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000680:	e005      	b.n	800068e <SPI_PeripheralClockControl+0x10e>
		enabled == ENABLE ? SPI6_PCLK_EN : SPI6_PCLK_DN;
 8000682:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000686:	4a06      	ldr	r2, [pc, #24]	@ (80006a0 <SPI_PeripheralClockControl+0x120>)
 8000688:	0d9b      	lsrs	r3, r3, #22
 800068a:	059b      	lsls	r3, r3, #22
 800068c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40013000 	.word	0x40013000
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40003800 	.word	0x40003800
 80006a8:	40003c00 	.word	0x40003c00
 80006ac:	40013400 	.word	0x40013400
 80006b0:	40015000 	.word	0x40015000
 80006b4:	40015400 	.word	0x40015400

080006b8 <SPI_Init>:
 * @brief             - Initializes the SPI peripheral given user requirements

 * @param[in]         - SPI_Handle_t *pHandle
 ********************************************************************/
void SPI_Init(SPI_Handle_t *pHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	SPI_Config_t config = pHandle->config;
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	3204      	adds	r2, #4
 80006c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ca:	c303      	stmia	r3!, {r0, r1}
 80006cc:	701a      	strb	r2, [r3, #0]
	SPI_RegDef_t* pSPI = pHandle->pSPIx;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	617b      	str	r3, [r7, #20]

	SPI_PeripheralClockControl(pSPI, ENABLE);
 80006d4:	2101      	movs	r1, #1
 80006d6:	6978      	ldr	r0, [r7, #20]
 80006d8:	f7ff ff52 	bl	8000580 <SPI_PeripheralClockControl>
	 * in a MODF error and check to see if the given clock prescaler
	 * works
	 */

	/* BIDI mode */
	pSPI->CR1 |= ( config.bidi_mode << SPICR1_BIT_BIDIMODE );
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	7a3b      	ldrb	r3, [r7, #8]
 80006e2:	03db      	lsls	r3, r3, #15
 80006e4:	431a      	orrs	r2, r3
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	601a      	str	r2, [r3, #0]

	/* Output enable in BIDI mode */
	pSPI->CR1 |= (config.bidi_output_mode << SPICR1_BIT_BIDIOE);
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	7a7b      	ldrb	r3, [r7, #9]
 80006f0:	039b      	lsls	r3, r3, #14
 80006f2:	431a      	orrs	r2, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	601a      	str	r2, [r3, #0]

	/* Frame format */
	pSPI->CR1 |= (config.frame_format << SPICR1_BIT_DFF);
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	7abb      	ldrb	r3, [r7, #10]
 80006fe:	02db      	lsls	r3, r3, #11
 8000700:	431a      	orrs	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	601a      	str	r2, [r3, #0]

	/* Slave management */
	pSPI->CR1 |= (config.slave_management << SPICR1_BIT_SSM);
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	7afb      	ldrb	r3, [r7, #11]
 800070c:	025b      	lsls	r3, r3, #9
 800070e:	431a      	orrs	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	601a      	str	r2, [r3, #0]

	/* Clock speed */
	pSPI->CR1 |= (config.spi_speed << SPICR1_BIT_BR);
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	7b3b      	ldrb	r3, [r7, #12]
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	431a      	orrs	r2, r3
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	601a      	str	r2, [r3, #0]

	/* Clock phase */
	pSPI->CR1 |= (config.clock_phase << SPICR1_BIT_CPOL);
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	431a      	orrs	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	601a      	str	r2, [r3, #0]

	/* Clock polarity */
	pSPI->CR1 |= (config.clock_phase << SPICR1_BIT_CPHA);
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7bba      	ldrb	r2, [r7, #14]
 8000736:	431a      	orrs	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	601a      	str	r2, [r3, #0]

	/* Master selection */
	pSPI->CR1 |= (config.master_selection << SPICR1_BIT_MSTR);
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	431a      	orrs	r2, r3
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	601a      	str	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <SPI_ReadBit>:
			*(u32*)NVIC_Reg &= ~(ENABLE << (IRQ_Number % mod_amount));
		}
	}
}
static u8 SPI_ReadBit(void *reg, u8 bit)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	70fb      	strb	r3, [r7, #3]
	/* All SPI regs are 4 bytes, so this can safely be casted */
	return *((u32*)reg) >> bit & 0x1;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	fa22 f303 	lsr.w	r3, r2, r3
 8000768:	b2db      	uxtb	r3, r3
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	b2db      	uxtb	r3, r3
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <read_status_bit>:

static u8 read_status_bit(SPI_RegDef_t *pSPIx, u8 status_bit)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	return ( pSPIx->SR  >> status_bit) & 0x1;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689a      	ldr	r2, [r3, #8]
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	fa22 f303 	lsr.w	r3, r2, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
}
 800079a:	4618      	mov	r0, r3
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <isRxRequired>:
	return Success;
}


static bool isRxRequired(SPI_RegDef_t* pSPIx)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	SPI_Mode_t currentSPIMode = SPI_GetCurrentMode(pSPIx);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 fab4 	bl	8000d1e <SPI_GetCurrentMode>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73bb      	strb	r3, [r7, #14]
	bool rxRequired = false;
 80007ba:	2300      	movs	r3, #0
 80007bc:	73fb      	strb	r3, [r7, #15]

	switch(currentSPIMode)
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d81c      	bhi.n	80007fe <isRxRequired+0x56>
 80007c4:	a201      	add	r2, pc, #4	@ (adr r2, 80007cc <isRxRequired+0x24>)
 80007c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ca:	bf00      	nop
 80007cc:	080007f3 	.word	0x080007f3
 80007d0:	080007f9 	.word	0x080007f9
 80007d4:	080007e1 	.word	0x080007e1
 80007d8:	080007e7 	.word	0x080007e7
 80007dc:	080007ed 	.word	0x080007ed
	{
		case ModeUnidirectionalRxOnly:
			rxRequired = true;
 80007e0:	2301      	movs	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
			break;
 80007e4:	e00e      	b.n	8000804 <isRxRequired+0x5c>
		case ModeBidirectionalRxOnly:
			rxRequired = true;
 80007e6:	2301      	movs	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
			break;
 80007ea:	e00b      	b.n	8000804 <isRxRequired+0x5c>
		case ModeBidirectionalTxOnly:
			rxRequired = false;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
			break;
 80007f0:	e008      	b.n	8000804 <isRxRequired+0x5c>
		case ModeFullDuplex:
			rxRequired = true;
 80007f2:	2301      	movs	r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]
			break;
 80007f6:	e005      	b.n	8000804 <isRxRequired+0x5c>
		case ModeUnidirectionalTxOnly:
			rxRequired = false;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
			break;
 80007fc:	e002      	b.n	8000804 <isRxRequired+0x5c>
		default:
			rxRequired = true;
 80007fe:	2301      	movs	r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
			break;
 8000802:	bf00      	nop
	}

	return rxRequired;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop

08000810 <SPI_Prepare>:
 * @Note              - This should be called before send, receive
 	 	 	 	 	 	assuming the peripheral is disabled, especially
 	 	 	 	 	 	if a hardware CS is being used.
 ********************************************************************/
void SPI_Prepare(SPI_RegDef_t* pSPIx)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	pSPIx->CR1 |= (ENABLE << SPICR1_BIT_SPE);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	601a      	str	r2, [r3, #0]

	/* Wait until the peripheral is ready for transmission */
	while( ((pSPIx->SR >> SPISTAT_BIT_BSY) & 0x1) == 0x1);
 8000824:	bf00      	nop
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	09db      	lsrs	r3, r3, #7
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	2b01      	cmp	r3, #1
 8000832:	d0f8      	beq.n	8000826 <SPI_Prepare+0x16>
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <SPI_FlushFifo>:
}


/* Flush the FIFO before starting a transfer in order to avoid a possible overrun */
static void SPI_FlushFifo(SPI_RegDef_t *pSPIx)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
	(void)pSPIx->DR;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68db      	ldr	r3, [r3, #12]
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <isRxOnly>:
	return (pSPIx->CR1 >> SPICR1_BIT_BIDIMODE) & 0x1;
}

/* Is the SPI enabled for RX only */
static u8 isRxOnly(SPI_RegDef_t *pSPIx)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	return (pSPIx->CR1 >> SPICR1_BIT_RXONLY) & 0x1;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	0a9b      	lsrs	r3, r3, #10
 8000868:	b2db      	uxtb	r3, r3
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	b2db      	uxtb	r3, r3
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <bytes_per_frame>:
{
	return isBIDI(pSPIx) && isRxOnly(pSPIx);
}

static u8 bytes_per_frame(SPI_RegDef_t *pSPIx)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	return ((((pSPIx->CR1 >> SPICR1_BIT_DFF) & 0x1) * 8U) + 8U) / 8U;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	0adb      	lsrs	r3, r3, #11
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	3301      	adds	r3, #1
 8000894:	b2db      	uxtb	r3, r3
}
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <SPI_MasterTransferBlocking>:

SPI_Status_t SPI_MasterTransferBlocking(SPI_Handle_t *pHandle, SPI_Transfer_t *pTransfer)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]

	assert(pTransfer != NULL);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d106      	bne.n	80008c2 <SPI_MasterTransferBlocking+0x1e>
 80008b4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a24 <SPI_MasterTransferBlocking+0x180>)
 80008b6:	4a5c      	ldr	r2, [pc, #368]	@ (8000a28 <SPI_MasterTransferBlocking+0x184>)
 80008b8:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80008bc:	485b      	ldr	r0, [pc, #364]	@ (8000a2c <SPI_MasterTransferBlocking+0x188>)
 80008be:	f000 fe33 	bl	8001528 <__assert_func>
	assert(pHandle != NULL);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d106      	bne.n	80008d6 <SPI_MasterTransferBlocking+0x32>
 80008c8:	4b59      	ldr	r3, [pc, #356]	@ (8000a30 <SPI_MasterTransferBlocking+0x18c>)
 80008ca:	4a57      	ldr	r2, [pc, #348]	@ (8000a28 <SPI_MasterTransferBlocking+0x184>)
 80008cc:	f240 1151 	movw	r1, #337	@ 0x151
 80008d0:	4856      	ldr	r0, [pc, #344]	@ (8000a2c <SPI_MasterTransferBlocking+0x188>)
 80008d2:	f000 fe29 	bl	8001528 <__assert_func>
	printf("does this print f work \n");
 80008d6:	4857      	ldr	r0, [pc, #348]	@ (8000a34 <SPI_MasterTransferBlocking+0x190>)
 80008d8:	f000 ff6e 	bl	80017b8 <puts>

	SPI_RegDef_t *pSPIx = pHandle->pSPIx;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
	assert(pSPIx != NULL);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d106      	bne.n	80008f6 <SPI_MasterTransferBlocking+0x52>
 80008e8:	4b53      	ldr	r3, [pc, #332]	@ (8000a38 <SPI_MasterTransferBlocking+0x194>)
 80008ea:	4a4f      	ldr	r2, [pc, #316]	@ (8000a28 <SPI_MasterTransferBlocking+0x184>)
 80008ec:	f240 1155 	movw	r1, #341	@ 0x155
 80008f0:	484e      	ldr	r0, [pc, #312]	@ (8000a2c <SPI_MasterTransferBlocking+0x188>)
 80008f2:	f000 fe19 	bl	8001528 <__assert_func>


	/* First check to see if the SPI is in an error state. If it is,
	 * then populate the error struct in the handle and return */
	if(handle_err_interrupt(pHandle)){
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f926 	bl	8000b48 <handle_err_interrupt>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SPI_MasterTransferBlocking+0x62>
		return ErrorState;
 8000902:	2306      	movs	r3, #6
 8000904:	e08a      	b.n	8000a1c <SPI_MasterTransferBlocking+0x178>
	}

	/* Spin until it isn't busy if that's the desired behavior */
	if(pTransfer->wait_blocking)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	7c1b      	ldrb	r3, [r3, #16]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d008      	beq.n	8000920 <SPI_MasterTransferBlocking+0x7c>
	{
		while(read_status_bit(pSPIx, SPISTAT_BIT_BSY) == BUSY);
 800090e:	bf00      	nop
 8000910:	2107      	movs	r1, #7
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f7ff ff32 	bl	800077c <read_status_bit>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d0f8      	beq.n	8000910 <SPI_MasterTransferBlocking+0x6c>
 800091e:	e008      	b.n	8000932 <SPI_MasterTransferBlocking+0x8e>
	}

	/* Otherwise return busy status */
	else if(read_status_bit(pSPIx, SPISTAT_BIT_BSY) == BUSY)
 8000920:	2107      	movs	r1, #7
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff ff2a 	bl	800077c <read_status_bit>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d101      	bne.n	8000932 <SPI_MasterTransferBlocking+0x8e>
	{
		return Busy;
 800092e:	2300      	movs	r3, #0
 8000930:	e074      	b.n	8000a1c <SPI_MasterTransferBlocking+0x178>
	}

	/* Check to see if the transfer is permissible */
	if(!SPI_CheckTransferArgument(pHandle, pTransfer, false))
 8000932:	2200      	movs	r2, #0
 8000934:	6839      	ldr	r1, [r7, #0]
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f936 	bl	8000ba8 <SPI_CheckTransferArgument>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <SPI_MasterTransferBlocking+0xa2>
	{
		return InvalidArgument;
 8000942:	2305      	movs	r3, #5
 8000944:	e06a      	b.n	8000a1c <SPI_MasterTransferBlocking+0x178>
	}

	/* Flush the FIFO in order to avoid the possibility of an overrun */
	SPI_FlushFifo(pHandle->pSPIx);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ff79 	bl	8000842 <SPI_FlushFifo>
	 * and is now sending a blocking transmission so that this process isn't unintentionally
	 * interrupted
	 */

	/* Disable all SPI interrupts */
	const u8 interruptConfig = SPI_InterruptConfig(pSPIx);
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f000 f98b 	bl	8000c6c <SPI_InterruptConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	72fb      	strb	r3, [r7, #11]
	SPI_DisableInterrupts(pSPIx, SPI_IT_ALL);
 800095a:	2107      	movs	r1, #7
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f000 f9b1 	bl	8000cc4 <SPI_DisableInterrupts>


	/* Wait until the TX buffer is empty */
#ifdef SPI_RETRY_TIMES
	while( (read_status_bit(pSPIx, SPISTAT_TXE) == TX_NOT_EMPTY) && (--pTransfer->retryTimes != 0U));
 8000962:	bf00      	nop
 8000964:	2101      	movs	r1, #1
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	f7ff ff08 	bl	800077c <read_status_bit>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d109      	bne.n	8000986 <SPI_MasterTransferBlocking+0xe2>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	7c5b      	ldrb	r3, [r3, #17]
 8000976:	3b01      	subs	r3, #1
 8000978:	b2da      	uxtb	r2, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	745a      	strb	r2, [r3, #17]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	7c5b      	ldrb	r3, [r3, #17]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1ee      	bne.n	8000964 <SPI_MasterTransferBlocking+0xc0>
#else
	while( read_status_bit(pSPIx, SPISTAT_TXE) == TX_NOT_EMPTY);
#endif

	u8 bytesPerFrame = ((((pSPIx->CR1 >> SPICR1_BIT_DFF) & 0x1) * 8U) + 8U) / 8U;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	0adb      	lsrs	r3, r3, #11
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	3301      	adds	r3, #1
 8000996:	72bb      	strb	r3, [r7, #10]
	size_t txSize = pTransfer->txSize;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	617b      	str	r3, [r7, #20]
	u8 *txBuffer = pTransfer->txBuffer;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	613b      	str	r3, [r7, #16]

	printf("hung 2\n");
 80009a4:	4825      	ldr	r0, [pc, #148]	@ (8000a3c <SPI_MasterTransferBlocking+0x198>)
 80009a6:	f000 ff07 	bl	80017b8 <puts>

	/* Load the data into the date register FIFO */
	while(txSize > 0)
 80009aa:	e026      	b.n	80009fa <SPI_MasterTransferBlocking+0x156>
	{

		if(bytesPerFrame == 1)
 80009ac:	7abb      	ldrb	r3, [r7, #10]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d10b      	bne.n	80009ca <SPI_MasterTransferBlocking+0x126>
		{
			pSPIx->DR = *txBuffer;
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	60da      	str	r2, [r3, #12]
			txBuffer++;
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	3301      	adds	r3, #1
 80009c0:	613b      	str	r3, [r7, #16]
			txSize--;
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00d      	b.n	80009e6 <SPI_MasterTransferBlocking+0x142>
		}
		else
		{
			pSPIx->DR = *((u16*)txBuffer);
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	60da      	str	r2, [r3, #12]
			txSize--;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
			txSize--;
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3b01      	subs	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
			(u16*)txBuffer++;
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	3301      	adds	r3, #1
 80009e4:	613b      	str	r3, [r7, #16]
		/* Check the mode the SPI is currently in to see if a response is to be expected.
		 * In order to avoid the possibility of an overrun, the data register should be
		 * read before a subsequent transfer is allowed.
		 */

		if(isRxRequired(pSPIx))
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f7ff fede 	bl	80007a8 <isRxRequired>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <SPI_MasterTransferBlocking+0x156>
		{
			SPI_ReceiveBlocking(pSPIx, pTransfer);
 80009f2:	6839      	ldr	r1, [r7, #0]
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f000 f849 	bl	8000a8c <SPI_ReceiveBlocking>
	while(txSize > 0)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1d5      	bne.n	80009ac <SPI_MasterTransferBlocking+0x108>
		}
	}

	/* Restore the SPI's interrupt configuration */
	if(interruptConfig > 0 )
 8000a00:	7afb      	ldrb	r3, [r7, #11]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d005      	beq.n	8000a12 <SPI_MasterTransferBlocking+0x16e>
		SPI_EnableInterrupts(pSPIx, interruptConfig);
 8000a06:	7afb      	ldrb	r3, [r7, #11]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f000 f971 	bl	8000cf2 <SPI_EnableInterrupts>
 8000a10:	e003      	b.n	8000a1a <SPI_MasterTransferBlocking+0x176>
	else
		SPI_EnableInterrupts(pSPIx, SPI_IT_ALL);
 8000a12:	2107      	movs	r1, #7
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f000 f96c 	bl	8000cf2 <SPI_EnableInterrupts>

	return Success;
 8000a1a:	2302      	movs	r3, #2
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08002540 	.word	0x08002540
 8000a28:	080025f8 	.word	0x080025f8
 8000a2c:	08002554 	.word	0x08002554
 8000a30:	08002564 	.word	0x08002564
 8000a34:	08002574 	.word	0x08002574
 8000a38:	0800258c 	.word	0x0800258c
 8000a3c:	0800259c 	.word	0x0800259c

08000a40 <SPI_Toggle_SSI>:
 *
 * @param[in]         - SPI_RegDef_t *pSPIx - the SPI peripheral
 * @param[in]		  - enabled - the enabled/disabled flag
 ********************************************************************/
void SPI_Toggle_SSI(SPI_RegDef_t* pSPIx, u8 enabled)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
	/* TODO First check to see if software slave management is enabled */

	pSPIx->CR1 |= (enabled << SPICR1_BIT_SSI);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	431a      	orrs	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <SPI_SSOE_Configure>:

void SPI_SSOE_Configure(SPI_RegDef_t* pSPIx,u8 enabled)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	70fb      	strb	r3, [r7, #3]
	pSPIx->CR2 |= (enabled << SPICR2_BIT_SSOE);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	605a      	str	r2, [r3, #4]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SPI_ReceiveBlocking>:

void SPI_ReceiveBlocking(SPI_RegDef_t* pSPIx, SPI_Transfer_t* pTransfer)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	/* Check the SPI mode - if the mode is unidirectional receivev-only
	 * mode, then it may be the case that the SPI isn't enabled, but
	 * the receive sequence automatically starts in this mode once the SPI
	 * is enabled */

	SPI_Mode_t currentSPIMode = SPI_GetCurrentMode(pSPIx);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 f941 	bl	8000d1e <SPI_GetCurrentMode>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]

	if(currentSPIMode == ModeUnidirectionalRxOnly)
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d10b      	bne.n	8000abe <SPI_ReceiveBlocking+0x32>
	{
		if( (pSPIx->CR1 & 0x20) != 0x20)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	2b20      	cmp	r3, #32
 8000ab0:	d005      	beq.n	8000abe <SPI_ReceiveBlocking+0x32>
		{
			pSPIx->CR1 |= (ENABLE << SPICR1_BIT_SPE);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]

	/* If an RX buffer wasn't provided but it is required to
	 * be read given the mode, then just flush the
	 * data buffer so no overrun happens */

	if(!pTransfer->rxBuffer)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d137      	bne.n	8000b36 <SPI_ReceiveBlocking+0xaa>
	{
		SPI_FlushFifo(pSPIx);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff febb 	bl	8000842 <SPI_FlushFifo>
				pTransfer->rxSize--;
			}
		}
	}

}
 8000acc:	e037      	b.n	8000b3e <SPI_ReceiveBlocking+0xb2>
			while(read_status_bit(pSPIx, RXNE_BITMASK) == RX_EMPTY);
 8000ace:	bf00      	nop
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fe52 	bl	800077c <read_status_bit>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f8      	beq.n	8000ad0 <SPI_ReceiveBlocking+0x44>
			if(bytes_per_frame(pSPIx) == 2)
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fecc 	bl	800087c <bytes_per_frame>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d115      	bne.n	8000b16 <SPI_ReceiveBlocking+0x8a>
				*((u16*)pTransfer->rxBuffer) = (u16)pSPIx->DR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	b292      	uxth	r2, r2
 8000af4:	801a      	strh	r2, [r3, #0]
				(u16*)pTransfer->rxBuffer++;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	605a      	str	r2, [r3, #4]
				pTransfer->rxSize--;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	1e5a      	subs	r2, r3, #1
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	60da      	str	r2, [r3, #12]
				pTransfer->rxSize--;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	e00f      	b.n	8000b36 <SPI_ReceiveBlocking+0xaa>
				*pTransfer->rxBuffer = (u8)pSPIx->DR;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	701a      	strb	r2, [r3, #0]
				pTransfer->rxBuffer++;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
				pTransfer->rxSize--;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	60da      	str	r2, [r3, #12]
		while(pTransfer->rxSize > 0 )
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1c7      	bne.n	8000ace <SPI_ReceiveBlocking+0x42>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <handle_err_interrupt>:
	 */

}

static u8 handle_err_interrupt(SPI_Handle_t *pHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	/* Read the most significant 8 bits of the status register and
	 * pack those results into the error struct of the handle */

	u8 *err_handle = (u8*)&pHandle->error_handle;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3321      	adds	r3, #33	@ 0x21
 8000b54:	613b      	str	r3, [r7, #16]
	u8 hasErrorState = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	75fb      	strb	r3, [r7, #23]

	static const u8 err_bits[3] = {SPISTAT_MODF, SPISTAT_OVR, SPISTAT_CRCERR};

	for(u8 i = 0; i < sizeof(SPI_Err_Handle_t); i++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	75bb      	strb	r3, [r7, #22]
 8000b5e:	e019      	b.n	8000b94 <handle_err_interrupt+0x4c>
	{
		u8 *member = (err_handle + i);
 8000b60:	7dbb      	ldrb	r3, [r7, #22]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4413      	add	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
		*member = read_status_bit(pHandle->pSPIx, err_bits[i]);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	7dbb      	ldrb	r3, [r7, #22]
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <handle_err_interrupt+0x5c>)
 8000b70:	5ccb      	ldrb	r3, [r1, r3]
 8000b72:	4619      	mov	r1, r3
 8000b74:	4610      	mov	r0, r2
 8000b76:	f7ff fe01 	bl	800077c <read_status_bit>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	701a      	strb	r2, [r3, #0]

		if(*member == 1)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d101      	bne.n	8000b8e <handle_err_interrupt+0x46>
			hasErrorState = 1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	75fb      	strb	r3, [r7, #23]
	for(u8 i = 0; i < sizeof(SPI_Err_Handle_t); i++)
 8000b8e:	7dbb      	ldrb	r3, [r7, #22]
 8000b90:	3301      	adds	r3, #1
 8000b92:	75bb      	strb	r3, [r7, #22]
 8000b94:	7dbb      	ldrb	r3, [r7, #22]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d9e2      	bls.n	8000b60 <handle_err_interrupt+0x18>
	}

	return hasErrorState;
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	08002614 	.word	0x08002614

08000ba8 <SPI_CheckTransferArgument>:
	}
}


u8 SPI_CheckTransferArgument(SPI_Handle_t *pHandle, SPI_Transfer_t *transfer, bool isDMA)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	71fb      	strb	r3, [r7, #7]
	assert(transfer != NULL);
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d106      	bne.n	8000bca <SPI_CheckTransferArgument+0x22>
 8000bbc:	4b28      	ldr	r3, [pc, #160]	@ (8000c60 <SPI_CheckTransferArgument+0xb8>)
 8000bbe:	4a29      	ldr	r2, [pc, #164]	@ (8000c64 <SPI_CheckTransferArgument+0xbc>)
 8000bc0:	f240 21ee 	movw	r1, #750	@ 0x2ee
 8000bc4:	4828      	ldr	r0, [pc, #160]	@ (8000c68 <SPI_CheckTransferArgument+0xc0>)
 8000bc6:	f000 fcaf 	bl	8001528 <__assert_func>

	if(transfer->txSize == 0U)
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <SPI_CheckTransferArgument+0x2e>
	{
		return INVALID;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e03f      	b.n	8000c56 <SPI_CheckTransferArgument+0xae>
	}

	if( (NULL == transfer->txBuffer) && (NULL == transfer->rxBuffer))
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d105      	bne.n	8000bea <SPI_CheckTransferArgument+0x42>
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <SPI_CheckTransferArgument+0x42>
	{
		return INVALID;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e035      	b.n	8000c56 <SPI_CheckTransferArgument+0xae>
	}

	/* If bidi mode is enabled, then only only TX or RX can happen at once, not
	 * simultaneously */
	if(pHandle->config.bidi_mode == ENABLE)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d117      	bne.n	8000c22 <SPI_CheckTransferArgument+0x7a>
	{
		/* If RX only is enabled, check to make sure TX buffer is empty */
		if( ((pHandle->pSPIx->CR1 >> SPICR1_BIT_RXONLY ) & 0x1) == ENABLE)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	0a9b      	lsrs	r3, r3, #10
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d105      	bne.n	8000c0e <SPI_CheckTransferArgument+0x66>
		{
			if(transfer->txBuffer != NULL)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00b      	beq.n	8000c22 <SPI_CheckTransferArgument+0x7a>
			{
				return INVALID;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e023      	b.n	8000c56 <SPI_CheckTransferArgument+0xae>
		}

		/* Otherwise, check to make sure txBuffer and rxBuffer both aren't null */
		else
		{
			if(transfer->rxBuffer != NULL && transfer->txBuffer != NULL)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d005      	beq.n	8000c22 <SPI_CheckTransferArgument+0x7a>
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SPI_CheckTransferArgument+0x7a>
			{
				return INVALID;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e019      	b.n	8000c56 <SPI_CheckTransferArgument+0xae>
			}
		}
	}

	u32 bitsPerFrame = (((pHandle->pSPIx->CR1 >> SPICR1_BIT_DFF) & 0x1) * 8U) + 8U;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	0adb      	lsrs	r3, r3, #11
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	3301      	adds	r3, #1
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	617b      	str	r3, [r7, #20]
	u32 bytesPerFrame = bitsPerFrame / 8U;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	613b      	str	r3, [r7, #16]

	/* If the bytes per frame is equal to 2, then the data size must be a multiple of 2 */
	if(transfer->txSize % bytesPerFrame > 0)
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c44:	6939      	ldr	r1, [r7, #16]
 8000c46:	fb01 f202 	mul.w	r2, r1, r2
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SPI_CheckTransferArgument+0xac>
	{
		return INVALID;
 8000c50:	2300      	movs	r3, #0
 8000c52:	e000      	b.n	8000c56 <SPI_CheckTransferArgument+0xae>
	}

	return VALID;
 8000c54:	2301      	movs	r3, #1

}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	080025a4 	.word	0x080025a4
 8000c64:	08002618 	.word	0x08002618
 8000c68:	08002554 	.word	0x08002554

08000c6c <SPI_InterruptConfig>:
 * @param[in]         - pSPIx - SPI peripheral.
 *
 * @return 			  - u8 where 3 MSBs (from first to last) are TXEIE, RXNEIE, ERRIE
 ********************************************************************************************/
u8 SPI_InterruptConfig(SPI_RegDef_t *pSPIx)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	u32 reg = pSPIx->CR2;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	60fb      	str	r3, [r7, #12]
	u8 TXEIE = reg >> SPICR2_BIT_TXEIE & 0x1;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	09db      	lsrs	r3, r3, #7
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	72fb      	strb	r3, [r7, #11]
	u8 RXNEIE = reg >> SPICR2_BIT_RNEIE & 0x1;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	099b      	lsrs	r3, r3, #6
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	72bb      	strb	r3, [r7, #10]
	u8 ERRIE = reg >> SPICR2_BIT_ERRIE & 0x1;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	095b      	lsrs	r3, r3, #5
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	727b      	strb	r3, [r7, #9]

	return SPI_IT_TXEIE(TXEIE) | SPI_IT_RXNEIE(RXNEIE) | SPI_IT_ERRIE(ERRIE);
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	b25a      	sxtb	r2, r3
 8000ca4:	7abb      	ldrb	r3, [r7, #10]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b25a      	sxtb	r2, r3
 8000cae:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SPI_DisableInterrupts>:
 * @brief             - Disables all interrupts on the SPI peripheral

 * @param[in]         - pSPIx - SPI peripheral.
 ********************************************************************************************/
void SPI_DisableInterrupts(SPI_RegDef_t *pSPIx, const u8 interruptConfig)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
	if(interruptConfig <= SPI_IT_ALL)
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	2b07      	cmp	r3, #7
 8000cd4:	d807      	bhi.n	8000ce6 <SPI_DisableInterrupts+0x22>
		pSPIx->CR2 &= ~(interruptConfig << SPICR2_BIT_ERRIE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	78fa      	ldrb	r2, [r7, #3]
 8000cdc:	0152      	lsls	r2, r2, #5
 8000cde:	43d2      	mvns	r2, r2
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	605a      	str	r2, [r3, #4]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <SPI_EnableInterrupts>:
 * @brief             - Enables all interrupts on the SPI peripheral

 * @param[in]         - pSPIx - SPI peripheral.
 ********************************************************************************************/
void SPI_EnableInterrupts(SPI_RegDef_t *pSPIx, const u8 interruptConfig)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	70fb      	strb	r3, [r7, #3]
	if(interruptConfig <= SPI_IT_ALL)
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d806      	bhi.n	8000d12 <SPI_EnableInterrupts+0x20>
		pSPIx->CR2 |= (interruptConfig << SPICR2_BIT_ERRIE);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	015b      	lsls	r3, r3, #5
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	605a      	str	r2, [r3, #4]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <SPI_GetCurrentMode>:

 * @param[in]         - pSPIx - SPI peripheral.
 * @return			  - the SPI mode
 ********************************************************************************************/
SPI_Mode_t SPI_GetCurrentMode(SPI_RegDef_t *pSPIx)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	u8 bidiModeEnable = (SPI_ReadBit(CR1_REG(pSPIx), SPICR1_BIT_BIDIMODE) == 1);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fd10 	bl	8000752 <SPI_ReadBit>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	bf0c      	ite	eq
 8000d38:	2301      	moveq	r3, #1
 8000d3a:	2300      	movne	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	73bb      	strb	r3, [r7, #14]
	u8 bidiOEDirection = SPI_ReadBit(CR1_REG(pSPIx), SPICR1_BIT_BIDIOE);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	210e      	movs	r1, #14
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fd03 	bl	8000752 <SPI_ReadBit>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	737b      	strb	r3, [r7, #13]

	SPI_Mode_t mode = ModeUnknown;
 8000d50:	2307      	movs	r3, #7
 8000d52:	73fb      	strb	r3, [r7, #15]

	/* Full-duplex */
	if(!bidiModeEnable)
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10a      	bne.n	8000d70 <SPI_GetCurrentMode+0x52>
	{
		/* Unidirectional receive-only mode (BIDIMODE=0 and RXONLY=1)
		* Full duplex (BIDIMODE=0 and RXONLY=0)
		*/

		mode = isRxOnly(pSPIx) ? ModeUnidirectionalRxOnly : ModeFullDuplex;
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fd7d 	bl	800085a <isRxOnly>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SPI_GetCurrentMode+0x4c>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e000      	b.n	8000d6c <SPI_GetCurrentMode+0x4e>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e006      	b.n	8000d7e <SPI_GetCurrentMode+0x60>
	/* Half-duplex */
	else
	{
		/* Bidirectional transmit mode (BIDIMODE=1 and BIDIOE=1)
		* Bidirectional receive mode (BIDIMODE=1 and BIDIOE=0) */
		mode = bidiOEDirection == 1 ? ModeBidirectionalTxOnly : ModeBidirectionalRxOnly;
 8000d70:	7b7b      	ldrb	r3, [r7, #13]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <SPI_GetCurrentMode+0x5c>
 8000d76:	2304      	movs	r3, #4
 8000d78:	e000      	b.n	8000d7c <SPI_GetCurrentMode+0x5e>
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	73fb      	strb	r3, [r7, #15]
	}

	return mode;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <main>:
#include <string.h>
#include <stdio.h>

extern void initialise_monitor_handles(void);
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09e      	sub	sp, #120	@ 0x78
 8000d8c:	af00      	add	r7, sp, #0
	/* For printf */
	initialise_monitor_handles();
 8000d8e:	f000 fb4d 	bl	800142c <initialise_monitor_handles>


	/* SPI MOSI pin - PB5 */
	GPIO_Handle_t spi_mosi;
	memset(&spi_mosi, 0, sizeof(spi_mosi));
 8000d92:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d96:	220c      	movs	r2, #12
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fdec 	bl	8001978 <memset>
	spi_mosi.pGPIOPad = GPIOB;
 8000da0:	4b60      	ldr	r3, [pc, #384]	@ (8000f24 <main+0x19c>)
 8000da2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	spi_mosi.config.mode_type = GPIO_MODE_ALTERNATE;
 8000da4:	2302      	movs	r3, #2
 8000da6:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
	spi_mosi.config.output_type = GPIO_PUSH_PULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	spi_mosi.config.alternate_mode_type = GPIO_AF_5;
 8000db0:	2305      	movs	r3, #5
 8000db2:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	spi_mosi.config.pin_number = GPIO_PIN_FIVE;
 8000db6:	2305      	movs	r3, #5
 8000db8:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
	spi_mosi.config.PUPD = GPIO_NPUPD;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

	GPIO_Init(&spi_mosi);
 8000dc2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fa5a 	bl	8000280 <GPIO_Init>

	/* SPI Chip Select pin - PC3, keep idle high */
	GPIO_Handle_t spi_cs;
	memset(&spi_cs, 0, sizeof(spi_cs));
 8000dcc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fdcf 	bl	8001978 <memset>
	spi_cs.pGPIOPad = GPIOC;
 8000dda:	4b53      	ldr	r3, [pc, #332]	@ (8000f28 <main+0x1a0>)
 8000ddc:	663b      	str	r3, [r7, #96]	@ 0x60
	spi_cs.config.mode_type = GPIO_MODE_OUTPUT;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	spi_cs.config.output_type = GPIO_OPEN_DRAIN;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
	spi_cs.config.pin_number = GPIO_PIN_THREE;
 8000dea:	2303      	movs	r3, #3
 8000dec:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	spi_cs.config.od_state_init = GPIO_UNSET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
	spi_cs.config.PUPD = GPIO_PU;
 8000df6:	2302      	movs	r3, #2
 8000df8:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a

	GPIO_Init(&spi_cs);
 8000dfc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fa3d 	bl	8000280 <GPIO_Init>

	/* Level shifter output enable pin */
	GPIO_Handle_t level_shifter_oe;
	memset(&level_shifter_oe, 0, sizeof(level_shifter_oe));
 8000e06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fdb2 	bl	8001978 <memset>
	level_shifter_oe.pGPIOPad = GPIOB;
 8000e14:	4b43      	ldr	r3, [pc, #268]	@ (8000f24 <main+0x19c>)
 8000e16:	657b      	str	r3, [r7, #84]	@ 0x54
	level_shifter_oe.config.mode_type = GPIO_MODE_OUTPUT;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
	level_shifter_oe.config.output_speed =GPIO_SPEED_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
	level_shifter_oe.config.output_type = GPIO_PUSH_PULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	level_shifter_oe.config.pin_number = GPIO_PIN_SEVEN;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	level_shifter_oe.config.PUPD = GPIO_NPUPD;
 8000e30:	2301      	movs	r3, #1
 8000e32:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

	GPIO_Init(&level_shifter_oe);
 8000e36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fa20 	bl	8000280 <GPIO_Init>

	/* SPI Serial Clock pin - PA5 */
	GPIO_Handle_t spi_sck;
	memset(&spi_sck, 0, sizeof(spi_sck));
 8000e40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e44:	220c      	movs	r2, #12
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fd95 	bl	8001978 <memset>
	spi_sck.pGPIOPad = GPIOA;
 8000e4e:	4b37      	ldr	r3, [pc, #220]	@ (8000f2c <main+0x1a4>)
 8000e50:	64bb      	str	r3, [r7, #72]	@ 0x48
	spi_sck.config.mode_type = GPIO_MODE_ALTERNATE;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	spi_sck.config.output_speed =GPIO_SPEED_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	spi_sck.config.output_type = GPIO_PUSH_PULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	spi_sck.config.alternate_mode_type = GPIO_AF_5;
 8000e64:	2305      	movs	r3, #5
 8000e66:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	spi_sck.config.pin_number = GPIO_PIN_FIVE;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	spi_sck.config.PUPD = GPIO_NPUPD;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	GPIO_Init(&spi_sck);
 8000e76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fa00 	bl	8000280 <GPIO_Init>

	/* Initialize the SPI peripheral */
	SPI_Handle_t spi_handle;
	memset(&spi_handle, 0, sizeof(spi_handle));
 8000e80:	f107 0318 	add.w	r3, r7, #24
 8000e84:	2230      	movs	r2, #48	@ 0x30
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fd75 	bl	8001978 <memset>

	spi_handle.pSPIx = SPI1;
 8000e8e:	4b28      	ldr	r3, [pc, #160]	@ (8000f30 <main+0x1a8>)
 8000e90:	61bb      	str	r3, [r7, #24]
	spi_handle.config.bidi_mode = SPI_BIDI_OFF;
 8000e92:	2300      	movs	r3, #0
 8000e94:	773b      	strb	r3, [r7, #28]
	spi_handle.config.bidi_output_mode = SPI_OUTPUT_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	777b      	strb	r3, [r7, #29]
	spi_handle.config.frame_format = SPI_DFF_8BIT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	77bb      	strb	r3, [r7, #30]
	spi_handle.config.slave_management = SPI_SW_SLAVE_ENABLE;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	77fb      	strb	r3, [r7, #31]
	spi_handle.config.master_selection = SPI_MASTER_ENABLE;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	/* Anything higher and the scope may not capture the frame correctly */
	spi_handle.config.spi_speed = PCLK_DIV_8;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f887 3020 	strb.w	r3, [r7, #32]

	SPI_Init(&spi_handle);
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fc00 	bl	80006b8 <SPI_Init>

	/* Ground the SPI's slave select internally - the MCU is always in master mode */
	SPI_Toggle_SSI(spi_handle.pSPIx, GPIO_SET);
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fdbf 	bl	8000a40 <SPI_Toggle_SSI>
	SPI_SSOE_Configure(spi_handle.pSPIx, DISABLE);
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fdcd 	bl	8000a66 <SPI_SSOE_Configure>

	SPI_Prepare(SPI1);
 8000ecc:	4818      	ldr	r0, [pc, #96]	@ (8000f30 <main+0x1a8>)
 8000ece:	f7ff fc9f 	bl	8000810 <SPI_Prepare>

	//uint8_t buff[3] = {69,68,67};
	uint8_t buff[1] = {69};
 8000ed2:	2345      	movs	r3, #69	@ 0x45
 8000ed4:	753b      	strb	r3, [r7, #20]

	SPI_Transfer_t transfer;
	memset(&transfer,0,sizeof(transfer));
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2214      	movs	r2, #20
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fd4b 	bl	8001978 <memset>
	transfer.txBuffer = buff;
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	603b      	str	r3, [r7, #0]
	transfer.txSize = sizeof(buff);
 8000ee8:	2301      	movs	r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]

	GPIO_WriteToPin(spi_cs.pGPIOPad, spi_cs.config.pin_number, GPIO_SET);
 8000eec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000eee:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fb1e 	bl	8000538 <GPIO_WriteToPin>
	GPIO_WriteToPin(level_shifter_oe.pGPIOPad, level_shifter_oe.config.pin_number, GPIO_SET);
 8000efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000efe:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8000f02:	4611      	mov	r1, r2
 8000f04:	2201      	movs	r2, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fb16 	bl	8000538 <GPIO_WriteToPin>
	SPI_MasterTransferBlocking(&spi_handle, &transfer);
 8000f0c:	463a      	mov	r2, r7
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fcc5 	bl	80008a4 <SPI_MasterTransferBlocking>

	//SPI_Disable(SPI1);
	//GPIO_WriteToPin(spi_cs.pGPIOPad, spi_cs.config.pin_number, GPIO_SET);
	printf("Made it here\n");
 8000f1a:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <main+0x1ac>)
 8000f1c:	f000 fc4c 	bl	80017b8 <puts>

	/* Loop forever */
	for(;;);
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <main+0x198>
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40013000 	.word	0x40013000
 8000f34:	080025e8 	.word	0x080025e8

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f000 fd54 	bl	8001a14 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20020000 	.word	0x20020000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20000080 	.word	0x20000080
 8000fa0:	20000280 	.word	0x20000280

08000fa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa4:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopForever+0xe>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopForever+0x16>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fd2:	f000 fd25 	bl	8001a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd6:	f7ff fed7 	bl	8000d88 <main>

08000fda <LoopForever>:

LoopForever:
  b LoopForever
 8000fda:	e7fe      	b.n	8000fda <LoopForever>
  ldr   r0, =_estack
 8000fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000fe8:	080026cc 	.word	0x080026cc
  ldr r2, =_sbss
 8000fec:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ff0:	2000027c 	.word	0x2000027c

08000ff4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <findslot>:
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <findslot+0x2c>)
 8000ffa:	b510      	push	{r4, lr}
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	b118      	cbz	r0, 800100a <findslot+0x12>
 8001002:	6a03      	ldr	r3, [r0, #32]
 8001004:	b90b      	cbnz	r3, 800100a <findslot+0x12>
 8001006:	f000 fb39 	bl	800167c <__sinit>
 800100a:	2c13      	cmp	r4, #19
 800100c:	d807      	bhi.n	800101e <findslot+0x26>
 800100e:	4806      	ldr	r0, [pc, #24]	@ (8001028 <findslot+0x30>)
 8001010:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001014:	3201      	adds	r2, #1
 8001016:	d002      	beq.n	800101e <findslot+0x26>
 8001018:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800101c:	bd10      	pop	{r4, pc}
 800101e:	2000      	movs	r0, #0
 8001020:	e7fc      	b.n	800101c <findslot+0x24>
 8001022:	bf00      	nop
 8001024:	20000014 	.word	0x20000014
 8001028:	20000090 	.word	0x20000090

0800102c <error>:
 800102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102e:	4604      	mov	r4, r0
 8001030:	f000 fcf0 	bl	8001a14 <__errno>
 8001034:	2613      	movs	r6, #19
 8001036:	4605      	mov	r5, r0
 8001038:	2700      	movs	r7, #0
 800103a:	4630      	mov	r0, r6
 800103c:	4639      	mov	r1, r7
 800103e:	beab      	bkpt	0x00ab
 8001040:	4606      	mov	r6, r0
 8001042:	602e      	str	r6, [r5, #0]
 8001044:	4620      	mov	r0, r4
 8001046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001048 <checkerror>:
 8001048:	1c43      	adds	r3, r0, #1
 800104a:	d101      	bne.n	8001050 <checkerror+0x8>
 800104c:	f7ff bfee 	b.w	800102c <error>
 8001050:	4770      	bx	lr

08001052 <_swiread>:
 8001052:	b530      	push	{r4, r5, lr}
 8001054:	b085      	sub	sp, #20
 8001056:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800105a:	9203      	str	r2, [sp, #12]
 800105c:	2406      	movs	r4, #6
 800105e:	ad01      	add	r5, sp, #4
 8001060:	4620      	mov	r0, r4
 8001062:	4629      	mov	r1, r5
 8001064:	beab      	bkpt	0x00ab
 8001066:	4604      	mov	r4, r0
 8001068:	4620      	mov	r0, r4
 800106a:	f7ff ffed 	bl	8001048 <checkerror>
 800106e:	b005      	add	sp, #20
 8001070:	bd30      	pop	{r4, r5, pc}

08001072 <_read>:
 8001072:	b570      	push	{r4, r5, r6, lr}
 8001074:	460e      	mov	r6, r1
 8001076:	4614      	mov	r4, r2
 8001078:	f7ff ffbe 	bl	8000ff8 <findslot>
 800107c:	4605      	mov	r5, r0
 800107e:	b930      	cbnz	r0, 800108e <_read+0x1c>
 8001080:	f000 fcc8 	bl	8001a14 <__errno>
 8001084:	2309      	movs	r3, #9
 8001086:	6003      	str	r3, [r0, #0]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	bd70      	pop	{r4, r5, r6, pc}
 800108e:	6800      	ldr	r0, [r0, #0]
 8001090:	4622      	mov	r2, r4
 8001092:	4631      	mov	r1, r6
 8001094:	f7ff ffdd 	bl	8001052 <_swiread>
 8001098:	1c43      	adds	r3, r0, #1
 800109a:	d0f5      	beq.n	8001088 <_read+0x16>
 800109c:	686b      	ldr	r3, [r5, #4]
 800109e:	1a20      	subs	r0, r4, r0
 80010a0:	4403      	add	r3, r0
 80010a2:	606b      	str	r3, [r5, #4]
 80010a4:	e7f2      	b.n	800108c <_read+0x1a>

080010a6 <_swilseek>:
 80010a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010a8:	460c      	mov	r4, r1
 80010aa:	4616      	mov	r6, r2
 80010ac:	f7ff ffa4 	bl	8000ff8 <findslot>
 80010b0:	4605      	mov	r5, r0
 80010b2:	b940      	cbnz	r0, 80010c6 <_swilseek+0x20>
 80010b4:	f000 fcae 	bl	8001a14 <__errno>
 80010b8:	2309      	movs	r3, #9
 80010ba:	6003      	str	r3, [r0, #0]
 80010bc:	f04f 34ff 	mov.w	r4, #4294967295
 80010c0:	4620      	mov	r0, r4
 80010c2:	b003      	add	sp, #12
 80010c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c6:	2e02      	cmp	r6, #2
 80010c8:	d903      	bls.n	80010d2 <_swilseek+0x2c>
 80010ca:	f000 fca3 	bl	8001a14 <__errno>
 80010ce:	2316      	movs	r3, #22
 80010d0:	e7f3      	b.n	80010ba <_swilseek+0x14>
 80010d2:	2e01      	cmp	r6, #1
 80010d4:	d112      	bne.n	80010fc <_swilseek+0x56>
 80010d6:	6843      	ldr	r3, [r0, #4]
 80010d8:	18e4      	adds	r4, r4, r3
 80010da:	d4f6      	bmi.n	80010ca <_swilseek+0x24>
 80010dc:	682b      	ldr	r3, [r5, #0]
 80010de:	260a      	movs	r6, #10
 80010e0:	e9cd 3400 	strd	r3, r4, [sp]
 80010e4:	466f      	mov	r7, sp
 80010e6:	4630      	mov	r0, r6
 80010e8:	4639      	mov	r1, r7
 80010ea:	beab      	bkpt	0x00ab
 80010ec:	4606      	mov	r6, r0
 80010ee:	4630      	mov	r0, r6
 80010f0:	f7ff ffaa 	bl	8001048 <checkerror>
 80010f4:	2800      	cmp	r0, #0
 80010f6:	dbe1      	blt.n	80010bc <_swilseek+0x16>
 80010f8:	606c      	str	r4, [r5, #4]
 80010fa:	e7e1      	b.n	80010c0 <_swilseek+0x1a>
 80010fc:	2e02      	cmp	r6, #2
 80010fe:	6803      	ldr	r3, [r0, #0]
 8001100:	d1ec      	bne.n	80010dc <_swilseek+0x36>
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	260c      	movs	r6, #12
 8001106:	466f      	mov	r7, sp
 8001108:	4630      	mov	r0, r6
 800110a:	4639      	mov	r1, r7
 800110c:	beab      	bkpt	0x00ab
 800110e:	4606      	mov	r6, r0
 8001110:	4630      	mov	r0, r6
 8001112:	f7ff ff99 	bl	8001048 <checkerror>
 8001116:	1c43      	adds	r3, r0, #1
 8001118:	d0d0      	beq.n	80010bc <_swilseek+0x16>
 800111a:	4404      	add	r4, r0
 800111c:	e7de      	b.n	80010dc <_swilseek+0x36>

0800111e <_lseek>:
 800111e:	f7ff bfc2 	b.w	80010a6 <_swilseek>

08001122 <_swiwrite>:
 8001122:	b530      	push	{r4, r5, lr}
 8001124:	b085      	sub	sp, #20
 8001126:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800112a:	9203      	str	r2, [sp, #12]
 800112c:	2405      	movs	r4, #5
 800112e:	ad01      	add	r5, sp, #4
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	beab      	bkpt	0x00ab
 8001136:	4604      	mov	r4, r0
 8001138:	4620      	mov	r0, r4
 800113a:	f7ff ff85 	bl	8001048 <checkerror>
 800113e:	b005      	add	sp, #20
 8001140:	bd30      	pop	{r4, r5, pc}

08001142 <_write>:
 8001142:	b570      	push	{r4, r5, r6, lr}
 8001144:	460e      	mov	r6, r1
 8001146:	4615      	mov	r5, r2
 8001148:	f7ff ff56 	bl	8000ff8 <findslot>
 800114c:	4604      	mov	r4, r0
 800114e:	b930      	cbnz	r0, 800115e <_write+0x1c>
 8001150:	f000 fc60 	bl	8001a14 <__errno>
 8001154:	2309      	movs	r3, #9
 8001156:	6003      	str	r3, [r0, #0]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	bd70      	pop	{r4, r5, r6, pc}
 800115e:	6800      	ldr	r0, [r0, #0]
 8001160:	462a      	mov	r2, r5
 8001162:	4631      	mov	r1, r6
 8001164:	f7ff ffdd 	bl	8001122 <_swiwrite>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	dbf5      	blt.n	8001158 <_write+0x16>
 800116c:	6862      	ldr	r2, [r4, #4]
 800116e:	1ae8      	subs	r0, r5, r3
 8001170:	4402      	add	r2, r0
 8001172:	42ab      	cmp	r3, r5
 8001174:	6062      	str	r2, [r4, #4]
 8001176:	d1f1      	bne.n	800115c <_write+0x1a>
 8001178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff bf55 	b.w	800102c <error>

08001182 <_swiclose>:
 8001182:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001184:	2402      	movs	r4, #2
 8001186:	9001      	str	r0, [sp, #4]
 8001188:	ad01      	add	r5, sp, #4
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	beab      	bkpt	0x00ab
 8001190:	4604      	mov	r4, r0
 8001192:	4620      	mov	r0, r4
 8001194:	f7ff ff58 	bl	8001048 <checkerror>
 8001198:	b003      	add	sp, #12
 800119a:	bd30      	pop	{r4, r5, pc}

0800119c <_close>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	4605      	mov	r5, r0
 80011a0:	f7ff ff2a 	bl	8000ff8 <findslot>
 80011a4:	4604      	mov	r4, r0
 80011a6:	b930      	cbnz	r0, 80011b6 <_close+0x1a>
 80011a8:	f000 fc34 	bl	8001a14 <__errno>
 80011ac:	2309      	movs	r3, #9
 80011ae:	6003      	str	r3, [r0, #0]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	bd38      	pop	{r3, r4, r5, pc}
 80011b6:	3d01      	subs	r5, #1
 80011b8:	2d01      	cmp	r5, #1
 80011ba:	d809      	bhi.n	80011d0 <_close+0x34>
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <_close+0x40>)
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d104      	bne.n	80011d0 <_close+0x34>
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	6023      	str	r3, [r4, #0]
 80011cc:	2000      	movs	r0, #0
 80011ce:	e7f1      	b.n	80011b4 <_close+0x18>
 80011d0:	6820      	ldr	r0, [r4, #0]
 80011d2:	f7ff ffd6 	bl	8001182 <_swiclose>
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d0f5      	beq.n	80011c6 <_close+0x2a>
 80011da:	e7eb      	b.n	80011b4 <_close+0x18>
 80011dc:	20000090 	.word	0x20000090

080011e0 <_getpid>:
 80011e0:	2001      	movs	r0, #1
 80011e2:	4770      	bx	lr

080011e4 <_swistat>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	460c      	mov	r4, r1
 80011e8:	f7ff ff06 	bl	8000ff8 <findslot>
 80011ec:	4605      	mov	r5, r0
 80011ee:	b930      	cbnz	r0, 80011fe <_swistat+0x1a>
 80011f0:	f000 fc10 	bl	8001a14 <__errno>
 80011f4:	2309      	movs	r3, #9
 80011f6:	6003      	str	r3, [r0, #0]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	bd70      	pop	{r4, r5, r6, pc}
 80011fe:	6863      	ldr	r3, [r4, #4]
 8001200:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001204:	6063      	str	r3, [r4, #4]
 8001206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800120a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800120c:	260c      	movs	r6, #12
 800120e:	4630      	mov	r0, r6
 8001210:	4629      	mov	r1, r5
 8001212:	beab      	bkpt	0x00ab
 8001214:	4605      	mov	r5, r0
 8001216:	4628      	mov	r0, r5
 8001218:	f7ff ff16 	bl	8001048 <checkerror>
 800121c:	1c43      	adds	r3, r0, #1
 800121e:	d0eb      	beq.n	80011f8 <_swistat+0x14>
 8001220:	6120      	str	r0, [r4, #16]
 8001222:	2000      	movs	r0, #0
 8001224:	e7ea      	b.n	80011fc <_swistat+0x18>

08001226 <_fstat>:
 8001226:	460b      	mov	r3, r1
 8001228:	b510      	push	{r4, lr}
 800122a:	2100      	movs	r1, #0
 800122c:	4604      	mov	r4, r0
 800122e:	2258      	movs	r2, #88	@ 0x58
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fba1 	bl	8001978 <memset>
 8001236:	4601      	mov	r1, r0
 8001238:	4620      	mov	r0, r4
 800123a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800123e:	f7ff bfd1 	b.w	80011e4 <_swistat>

08001242 <_stat>:
 8001242:	b538      	push	{r3, r4, r5, lr}
 8001244:	460d      	mov	r5, r1
 8001246:	4604      	mov	r4, r0
 8001248:	2258      	movs	r2, #88	@ 0x58
 800124a:	2100      	movs	r1, #0
 800124c:	4628      	mov	r0, r5
 800124e:	f000 fb93 	bl	8001978 <memset>
 8001252:	4620      	mov	r0, r4
 8001254:	2100      	movs	r1, #0
 8001256:	f000 f811 	bl	800127c <_swiopen>
 800125a:	1c43      	adds	r3, r0, #1
 800125c:	4604      	mov	r4, r0
 800125e:	d00b      	beq.n	8001278 <_stat+0x36>
 8001260:	686b      	ldr	r3, [r5, #4]
 8001262:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8001266:	606b      	str	r3, [r5, #4]
 8001268:	4629      	mov	r1, r5
 800126a:	f7ff ffbb 	bl	80011e4 <_swistat>
 800126e:	4605      	mov	r5, r0
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff ff93 	bl	800119c <_close>
 8001276:	462c      	mov	r4, r5
 8001278:	4620      	mov	r0, r4
 800127a:	bd38      	pop	{r3, r4, r5, pc}

0800127c <_swiopen>:
 800127c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001280:	4f29      	ldr	r7, [pc, #164]	@ (8001328 <_swiopen+0xac>)
 8001282:	b096      	sub	sp, #88	@ 0x58
 8001284:	4682      	mov	sl, r0
 8001286:	460e      	mov	r6, r1
 8001288:	2400      	movs	r4, #0
 800128a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800128e:	3301      	adds	r3, #1
 8001290:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8001294:	d00c      	beq.n	80012b0 <_swiopen+0x34>
 8001296:	3401      	adds	r4, #1
 8001298:	2c14      	cmp	r4, #20
 800129a:	d1f6      	bne.n	800128a <_swiopen+0xe>
 800129c:	f000 fbba 	bl	8001a14 <__errno>
 80012a0:	2318      	movs	r3, #24
 80012a2:	6003      	str	r3, [r0, #0]
 80012a4:	f04f 34ff 	mov.w	r4, #4294967295
 80012a8:	4620      	mov	r0, r4
 80012aa:	b016      	add	sp, #88	@ 0x58
 80012ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80012b4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80012b8:	46e9      	mov	r9, sp
 80012ba:	d109      	bne.n	80012d0 <_swiopen+0x54>
 80012bc:	4649      	mov	r1, r9
 80012be:	4650      	mov	r0, sl
 80012c0:	f7ff ffbf 	bl	8001242 <_stat>
 80012c4:	3001      	adds	r0, #1
 80012c6:	d003      	beq.n	80012d0 <_swiopen+0x54>
 80012c8:	f000 fba4 	bl	8001a14 <__errno>
 80012cc:	2311      	movs	r3, #17
 80012ce:	e7e8      	b.n	80012a2 <_swiopen+0x26>
 80012d0:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80012d4:	f240 6301 	movw	r3, #1537	@ 0x601
 80012d8:	07b2      	lsls	r2, r6, #30
 80012da:	bf48      	it	mi
 80012dc:	f045 0502 	orrmi.w	r5, r5, #2
 80012e0:	421e      	tst	r6, r3
 80012e2:	bf18      	it	ne
 80012e4:	f045 0504 	orrne.w	r5, r5, #4
 80012e8:	0733      	lsls	r3, r6, #28
 80012ea:	bf48      	it	mi
 80012ec:	f025 0504 	bicmi.w	r5, r5, #4
 80012f0:	4650      	mov	r0, sl
 80012f2:	bf48      	it	mi
 80012f4:	f045 0508 	orrmi.w	r5, r5, #8
 80012f8:	f8cd a000 	str.w	sl, [sp]
 80012fc:	f7fe ff68 	bl	80001d0 <strlen>
 8001300:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8001304:	2501      	movs	r5, #1
 8001306:	4628      	mov	r0, r5
 8001308:	4649      	mov	r1, r9
 800130a:	beab      	bkpt	0x00ab
 800130c:	4605      	mov	r5, r0
 800130e:	2d00      	cmp	r5, #0
 8001310:	db05      	blt.n	800131e <_swiopen+0xa2>
 8001312:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8001316:	4447      	add	r7, r8
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	e7c4      	b.n	80012a8 <_swiopen+0x2c>
 800131e:	4628      	mov	r0, r5
 8001320:	f7ff fe84 	bl	800102c <error>
 8001324:	4604      	mov	r4, r0
 8001326:	e7bf      	b.n	80012a8 <_swiopen+0x2c>
 8001328:	20000090 	.word	0x20000090

0800132c <_get_semihosting_exts>:
 800132c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001330:	4606      	mov	r6, r0
 8001332:	460f      	mov	r7, r1
 8001334:	4829      	ldr	r0, [pc, #164]	@ (80013dc <_get_semihosting_exts+0xb0>)
 8001336:	2100      	movs	r1, #0
 8001338:	4615      	mov	r5, r2
 800133a:	f7ff ff9f 	bl	800127c <_swiopen>
 800133e:	462a      	mov	r2, r5
 8001340:	4604      	mov	r4, r0
 8001342:	2100      	movs	r1, #0
 8001344:	4630      	mov	r0, r6
 8001346:	f000 fb17 	bl	8001978 <memset>
 800134a:	1c63      	adds	r3, r4, #1
 800134c:	d014      	beq.n	8001378 <_get_semihosting_exts+0x4c>
 800134e:	4620      	mov	r0, r4
 8001350:	f7ff fe52 	bl	8000ff8 <findslot>
 8001354:	f04f 080c 	mov.w	r8, #12
 8001358:	4681      	mov	r9, r0
 800135a:	4640      	mov	r0, r8
 800135c:	4649      	mov	r1, r9
 800135e:	beab      	bkpt	0x00ab
 8001360:	4680      	mov	r8, r0
 8001362:	4640      	mov	r0, r8
 8001364:	f7ff fe70 	bl	8001048 <checkerror>
 8001368:	2803      	cmp	r0, #3
 800136a:	dd02      	ble.n	8001372 <_get_semihosting_exts+0x46>
 800136c:	1ec3      	subs	r3, r0, #3
 800136e:	42ab      	cmp	r3, r5
 8001370:	dc07      	bgt.n	8001382 <_get_semihosting_exts+0x56>
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff ff12 	bl	800119c <_close>
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	b003      	add	sp, #12
 800137e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001382:	2204      	movs	r2, #4
 8001384:	eb0d 0102 	add.w	r1, sp, r2
 8001388:	4620      	mov	r0, r4
 800138a:	f7ff fe72 	bl	8001072 <_read>
 800138e:	2803      	cmp	r0, #3
 8001390:	ddef      	ble.n	8001372 <_get_semihosting_exts+0x46>
 8001392:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001396:	2b53      	cmp	r3, #83	@ 0x53
 8001398:	d1eb      	bne.n	8001372 <_get_semihosting_exts+0x46>
 800139a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800139e:	2b48      	cmp	r3, #72	@ 0x48
 80013a0:	d1e7      	bne.n	8001372 <_get_semihosting_exts+0x46>
 80013a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80013a6:	2b46      	cmp	r3, #70	@ 0x46
 80013a8:	d1e3      	bne.n	8001372 <_get_semihosting_exts+0x46>
 80013aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80013ae:	2b42      	cmp	r3, #66	@ 0x42
 80013b0:	d1df      	bne.n	8001372 <_get_semihosting_exts+0x46>
 80013b2:	2201      	movs	r2, #1
 80013b4:	4639      	mov	r1, r7
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff fe75 	bl	80010a6 <_swilseek>
 80013bc:	2800      	cmp	r0, #0
 80013be:	dbd8      	blt.n	8001372 <_get_semihosting_exts+0x46>
 80013c0:	462a      	mov	r2, r5
 80013c2:	4631      	mov	r1, r6
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff fe54 	bl	8001072 <_read>
 80013ca:	4605      	mov	r5, r0
 80013cc:	4620      	mov	r0, r4
 80013ce:	f7ff fee5 	bl	800119c <_close>
 80013d2:	4628      	mov	r0, r5
 80013d4:	f7ff fe38 	bl	8001048 <checkerror>
 80013d8:	e7d0      	b.n	800137c <_get_semihosting_exts+0x50>
 80013da:	bf00      	nop
 80013dc:	08002632 	.word	0x08002632

080013e0 <initialise_semihosting_exts>:
 80013e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013e2:	4d0a      	ldr	r5, [pc, #40]	@ (800140c <initialise_semihosting_exts+0x2c>)
 80013e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001410 <initialise_semihosting_exts+0x30>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	2201      	movs	r2, #1
 80013ea:	a801      	add	r0, sp, #4
 80013ec:	6029      	str	r1, [r5, #0]
 80013ee:	6022      	str	r2, [r4, #0]
 80013f0:	f7ff ff9c 	bl	800132c <_get_semihosting_exts>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	dd07      	ble.n	8001408 <initialise_semihosting_exts+0x28>
 80013f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80013fc:	f003 0201 	and.w	r2, r3, #1
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	602a      	str	r2, [r5, #0]
 8001406:	6023      	str	r3, [r4, #0]
 8001408:	b003      	add	sp, #12
 800140a:	bd30      	pop	{r4, r5, pc}
 800140c:	20000004 	.word	0x20000004
 8001410:	20000000 	.word	0x20000000

08001414 <_has_ext_stdout_stderr>:
 8001414:	b510      	push	{r4, lr}
 8001416:	4c04      	ldr	r4, [pc, #16]	@ (8001428 <_has_ext_stdout_stderr+0x14>)
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	da01      	bge.n	8001422 <_has_ext_stdout_stderr+0xe>
 800141e:	f7ff ffdf 	bl	80013e0 <initialise_semihosting_exts>
 8001422:	6820      	ldr	r0, [r4, #0]
 8001424:	bd10      	pop	{r4, pc}
 8001426:	bf00      	nop
 8001428:	20000000 	.word	0x20000000

0800142c <initialise_monitor_handles>:
 800142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001430:	b085      	sub	sp, #20
 8001432:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80014e4 <initialise_monitor_handles+0xb8>
 8001436:	f8cd 9004 	str.w	r9, [sp, #4]
 800143a:	2303      	movs	r3, #3
 800143c:	2400      	movs	r4, #0
 800143e:	9303      	str	r3, [sp, #12]
 8001440:	af01      	add	r7, sp, #4
 8001442:	9402      	str	r4, [sp, #8]
 8001444:	2501      	movs	r5, #1
 8001446:	4628      	mov	r0, r5
 8001448:	4639      	mov	r1, r7
 800144a:	beab      	bkpt	0x00ab
 800144c:	4605      	mov	r5, r0
 800144e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80014e8 <initialise_monitor_handles+0xbc>
 8001452:	4623      	mov	r3, r4
 8001454:	4c20      	ldr	r4, [pc, #128]	@ (80014d8 <initialise_monitor_handles+0xac>)
 8001456:	f8c8 5000 	str.w	r5, [r8]
 800145a:	f04f 32ff 	mov.w	r2, #4294967295
 800145e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001462:	3301      	adds	r3, #1
 8001464:	2b14      	cmp	r3, #20
 8001466:	d1fa      	bne.n	800145e <initialise_monitor_handles+0x32>
 8001468:	f7ff ffd4 	bl	8001414 <_has_ext_stdout_stderr>
 800146c:	4d1b      	ldr	r5, [pc, #108]	@ (80014dc <initialise_monitor_handles+0xb0>)
 800146e:	b1d0      	cbz	r0, 80014a6 <initialise_monitor_handles+0x7a>
 8001470:	f04f 0a03 	mov.w	sl, #3
 8001474:	2304      	movs	r3, #4
 8001476:	f8cd 9004 	str.w	r9, [sp, #4]
 800147a:	2601      	movs	r6, #1
 800147c:	f8cd a00c 	str.w	sl, [sp, #12]
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	4630      	mov	r0, r6
 8001484:	4639      	mov	r1, r7
 8001486:	beab      	bkpt	0x00ab
 8001488:	4683      	mov	fp, r0
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <initialise_monitor_handles+0xb4>)
 800148c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001490:	f8c3 b000 	str.w	fp, [r3]
 8001494:	2308      	movs	r3, #8
 8001496:	f8cd a00c 	str.w	sl, [sp, #12]
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	4630      	mov	r0, r6
 800149e:	4639      	mov	r1, r7
 80014a0:	beab      	bkpt	0x00ab
 80014a2:	4606      	mov	r6, r0
 80014a4:	602e      	str	r6, [r5, #0]
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	bf02      	ittt	eq
 80014ac:	4b0c      	ldreq	r3, [pc, #48]	@ (80014e0 <initialise_monitor_handles+0xb4>)
 80014ae:	681b      	ldreq	r3, [r3, #0]
 80014b0:	602b      	streq	r3, [r5, #0]
 80014b2:	2600      	movs	r6, #0
 80014b4:	f8d8 3000 	ldr.w	r3, [r8]
 80014b8:	6023      	str	r3, [r4, #0]
 80014ba:	6066      	str	r6, [r4, #4]
 80014bc:	f7ff ffaa 	bl	8001414 <_has_ext_stdout_stderr>
 80014c0:	b130      	cbz	r0, 80014d0 <initialise_monitor_handles+0xa4>
 80014c2:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <initialise_monitor_handles+0xb4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80014ca:	682b      	ldr	r3, [r5, #0]
 80014cc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80014d0:	b005      	add	sp, #20
 80014d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014d6:	bf00      	nop
 80014d8:	20000090 	.word	0x20000090
 80014dc:	20000084 	.word	0x20000084
 80014e0:	20000088 	.word	0x20000088
 80014e4:	08002648 	.word	0x08002648
 80014e8:	2000008c 	.word	0x2000008c

080014ec <_isatty>:
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	f7ff fd83 	bl	8000ff8 <findslot>
 80014f2:	2409      	movs	r4, #9
 80014f4:	4605      	mov	r5, r0
 80014f6:	b920      	cbnz	r0, 8001502 <_isatty+0x16>
 80014f8:	f000 fa8c 	bl	8001a14 <__errno>
 80014fc:	6004      	str	r4, [r0, #0]
 80014fe:	2000      	movs	r0, #0
 8001500:	bd70      	pop	{r4, r5, r6, pc}
 8001502:	4620      	mov	r0, r4
 8001504:	4629      	mov	r1, r5
 8001506:	beab      	bkpt	0x00ab
 8001508:	4604      	mov	r4, r0
 800150a:	2c01      	cmp	r4, #1
 800150c:	4620      	mov	r0, r4
 800150e:	d0f7      	beq.n	8001500 <_isatty+0x14>
 8001510:	f000 fa80 	bl	8001a14 <__errno>
 8001514:	2513      	movs	r5, #19
 8001516:	4604      	mov	r4, r0
 8001518:	2600      	movs	r6, #0
 800151a:	4628      	mov	r0, r5
 800151c:	4631      	mov	r1, r6
 800151e:	beab      	bkpt	0x00ab
 8001520:	4605      	mov	r5, r0
 8001522:	6025      	str	r5, [r4, #0]
 8001524:	e7eb      	b.n	80014fe <_isatty+0x12>
	...

08001528 <__assert_func>:
 8001528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800152a:	4614      	mov	r4, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <__assert_func+0x2c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4605      	mov	r5, r0
 8001534:	68d8      	ldr	r0, [r3, #12]
 8001536:	b954      	cbnz	r4, 800154e <__assert_func+0x26>
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <__assert_func+0x30>)
 800153a:	461c      	mov	r4, r3
 800153c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001540:	9100      	str	r1, [sp, #0]
 8001542:	462b      	mov	r3, r5
 8001544:	4905      	ldr	r1, [pc, #20]	@ (800155c <__assert_func+0x34>)
 8001546:	f000 f8b1 	bl	80016ac <fiprintf>
 800154a:	f000 fa90 	bl	8001a6e <abort>
 800154e:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__assert_func+0x38>)
 8001550:	e7f4      	b.n	800153c <__assert_func+0x14>
 8001552:	bf00      	nop
 8001554:	20000014 	.word	0x20000014
 8001558:	08002687 	.word	0x08002687
 800155c:	08002659 	.word	0x08002659
 8001560:	0800264c 	.word	0x0800264c

08001564 <std>:
 8001564:	2300      	movs	r3, #0
 8001566:	b510      	push	{r4, lr}
 8001568:	4604      	mov	r4, r0
 800156a:	e9c0 3300 	strd	r3, r3, [r0]
 800156e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001572:	6083      	str	r3, [r0, #8]
 8001574:	8181      	strh	r1, [r0, #12]
 8001576:	6643      	str	r3, [r0, #100]	@ 0x64
 8001578:	81c2      	strh	r2, [r0, #14]
 800157a:	6183      	str	r3, [r0, #24]
 800157c:	4619      	mov	r1, r3
 800157e:	2208      	movs	r2, #8
 8001580:	305c      	adds	r0, #92	@ 0x5c
 8001582:	f000 f9f9 	bl	8001978 <memset>
 8001586:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <std+0x58>)
 8001588:	6263      	str	r3, [r4, #36]	@ 0x24
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <std+0x5c>)
 800158c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <std+0x60>)
 8001590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001592:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <std+0x64>)
 8001594:	6323      	str	r3, [r4, #48]	@ 0x30
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <std+0x68>)
 8001598:	6224      	str	r4, [r4, #32]
 800159a:	429c      	cmp	r4, r3
 800159c:	d006      	beq.n	80015ac <std+0x48>
 800159e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80015a2:	4294      	cmp	r4, r2
 80015a4:	d002      	beq.n	80015ac <std+0x48>
 80015a6:	33d0      	adds	r3, #208	@ 0xd0
 80015a8:	429c      	cmp	r4, r3
 80015aa:	d105      	bne.n	80015b8 <std+0x54>
 80015ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80015b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015b4:	f000 ba58 	b.w	8001a68 <__retarget_lock_init_recursive>
 80015b8:	bd10      	pop	{r4, pc}
 80015ba:	bf00      	nop
 80015bc:	080017c9 	.word	0x080017c9
 80015c0:	080017eb 	.word	0x080017eb
 80015c4:	08001823 	.word	0x08001823
 80015c8:	08001847 	.word	0x08001847
 80015cc:	20000130 	.word	0x20000130

080015d0 <stdio_exit_handler>:
 80015d0:	4a02      	ldr	r2, [pc, #8]	@ (80015dc <stdio_exit_handler+0xc>)
 80015d2:	4903      	ldr	r1, [pc, #12]	@ (80015e0 <stdio_exit_handler+0x10>)
 80015d4:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <stdio_exit_handler+0x14>)
 80015d6:	f000 b87b 	b.w	80016d0 <_fwalk_sglue>
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008
 80015e0:	08002315 	.word	0x08002315
 80015e4:	20000018 	.word	0x20000018

080015e8 <cleanup_stdio>:
 80015e8:	6841      	ldr	r1, [r0, #4]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <cleanup_stdio+0x34>)
 80015ec:	4299      	cmp	r1, r3
 80015ee:	b510      	push	{r4, lr}
 80015f0:	4604      	mov	r4, r0
 80015f2:	d001      	beq.n	80015f8 <cleanup_stdio+0x10>
 80015f4:	f000 fe8e 	bl	8002314 <_fflush_r>
 80015f8:	68a1      	ldr	r1, [r4, #8]
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <cleanup_stdio+0x38>)
 80015fc:	4299      	cmp	r1, r3
 80015fe:	d002      	beq.n	8001606 <cleanup_stdio+0x1e>
 8001600:	4620      	mov	r0, r4
 8001602:	f000 fe87 	bl	8002314 <_fflush_r>
 8001606:	68e1      	ldr	r1, [r4, #12]
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <cleanup_stdio+0x3c>)
 800160a:	4299      	cmp	r1, r3
 800160c:	d004      	beq.n	8001618 <cleanup_stdio+0x30>
 800160e:	4620      	mov	r0, r4
 8001610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001614:	f000 be7e 	b.w	8002314 <_fflush_r>
 8001618:	bd10      	pop	{r4, pc}
 800161a:	bf00      	nop
 800161c:	20000130 	.word	0x20000130
 8001620:	20000198 	.word	0x20000198
 8001624:	20000200 	.word	0x20000200

08001628 <global_stdio_init.part.0>:
 8001628:	b510      	push	{r4, lr}
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <global_stdio_init.part.0+0x30>)
 800162c:	4c0b      	ldr	r4, [pc, #44]	@ (800165c <global_stdio_init.part.0+0x34>)
 800162e:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <global_stdio_init.part.0+0x38>)
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	4620      	mov	r0, r4
 8001634:	2200      	movs	r2, #0
 8001636:	2104      	movs	r1, #4
 8001638:	f7ff ff94 	bl	8001564 <std>
 800163c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001640:	2201      	movs	r2, #1
 8001642:	2109      	movs	r1, #9
 8001644:	f7ff ff8e 	bl	8001564 <std>
 8001648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800164c:	2202      	movs	r2, #2
 800164e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001652:	2112      	movs	r1, #18
 8001654:	f7ff bf86 	b.w	8001564 <std>
 8001658:	20000268 	.word	0x20000268
 800165c:	20000130 	.word	0x20000130
 8001660:	080015d1 	.word	0x080015d1

08001664 <__sfp_lock_acquire>:
 8001664:	4801      	ldr	r0, [pc, #4]	@ (800166c <__sfp_lock_acquire+0x8>)
 8001666:	f000 ba00 	b.w	8001a6a <__retarget_lock_acquire_recursive>
 800166a:	bf00      	nop
 800166c:	20000271 	.word	0x20000271

08001670 <__sfp_lock_release>:
 8001670:	4801      	ldr	r0, [pc, #4]	@ (8001678 <__sfp_lock_release+0x8>)
 8001672:	f000 b9fb 	b.w	8001a6c <__retarget_lock_release_recursive>
 8001676:	bf00      	nop
 8001678:	20000271 	.word	0x20000271

0800167c <__sinit>:
 800167c:	b510      	push	{r4, lr}
 800167e:	4604      	mov	r4, r0
 8001680:	f7ff fff0 	bl	8001664 <__sfp_lock_acquire>
 8001684:	6a23      	ldr	r3, [r4, #32]
 8001686:	b11b      	cbz	r3, 8001690 <__sinit+0x14>
 8001688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800168c:	f7ff bff0 	b.w	8001670 <__sfp_lock_release>
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <__sinit+0x28>)
 8001692:	6223      	str	r3, [r4, #32]
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <__sinit+0x2c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f5      	bne.n	8001688 <__sinit+0xc>
 800169c:	f7ff ffc4 	bl	8001628 <global_stdio_init.part.0>
 80016a0:	e7f2      	b.n	8001688 <__sinit+0xc>
 80016a2:	bf00      	nop
 80016a4:	080015e9 	.word	0x080015e9
 80016a8:	20000268 	.word	0x20000268

080016ac <fiprintf>:
 80016ac:	b40e      	push	{r1, r2, r3}
 80016ae:	b503      	push	{r0, r1, lr}
 80016b0:	4601      	mov	r1, r0
 80016b2:	ab03      	add	r3, sp, #12
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <fiprintf+0x20>)
 80016b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80016ba:	6800      	ldr	r0, [r0, #0]
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	f000 faff 	bl	8001cc0 <_vfiprintf_r>
 80016c2:	b002      	add	sp, #8
 80016c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80016c8:	b003      	add	sp, #12
 80016ca:	4770      	bx	lr
 80016cc:	20000014 	.word	0x20000014

080016d0 <_fwalk_sglue>:
 80016d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016d4:	4607      	mov	r7, r0
 80016d6:	4688      	mov	r8, r1
 80016d8:	4614      	mov	r4, r2
 80016da:	2600      	movs	r6, #0
 80016dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016e0:	f1b9 0901 	subs.w	r9, r9, #1
 80016e4:	d505      	bpl.n	80016f2 <_fwalk_sglue+0x22>
 80016e6:	6824      	ldr	r4, [r4, #0]
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d1f7      	bne.n	80016dc <_fwalk_sglue+0xc>
 80016ec:	4630      	mov	r0, r6
 80016ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016f2:	89ab      	ldrh	r3, [r5, #12]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d907      	bls.n	8001708 <_fwalk_sglue+0x38>
 80016f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016fc:	3301      	adds	r3, #1
 80016fe:	d003      	beq.n	8001708 <_fwalk_sglue+0x38>
 8001700:	4629      	mov	r1, r5
 8001702:	4638      	mov	r0, r7
 8001704:	47c0      	blx	r8
 8001706:	4306      	orrs	r6, r0
 8001708:	3568      	adds	r5, #104	@ 0x68
 800170a:	e7e9      	b.n	80016e0 <_fwalk_sglue+0x10>

0800170c <_puts_r>:
 800170c:	6a03      	ldr	r3, [r0, #32]
 800170e:	b570      	push	{r4, r5, r6, lr}
 8001710:	6884      	ldr	r4, [r0, #8]
 8001712:	4605      	mov	r5, r0
 8001714:	460e      	mov	r6, r1
 8001716:	b90b      	cbnz	r3, 800171c <_puts_r+0x10>
 8001718:	f7ff ffb0 	bl	800167c <__sinit>
 800171c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800171e:	07db      	lsls	r3, r3, #31
 8001720:	d405      	bmi.n	800172e <_puts_r+0x22>
 8001722:	89a3      	ldrh	r3, [r4, #12]
 8001724:	0598      	lsls	r0, r3, #22
 8001726:	d402      	bmi.n	800172e <_puts_r+0x22>
 8001728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800172a:	f000 f99e 	bl	8001a6a <__retarget_lock_acquire_recursive>
 800172e:	89a3      	ldrh	r3, [r4, #12]
 8001730:	0719      	lsls	r1, r3, #28
 8001732:	d502      	bpl.n	800173a <_puts_r+0x2e>
 8001734:	6923      	ldr	r3, [r4, #16]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d135      	bne.n	80017a6 <_puts_r+0x9a>
 800173a:	4621      	mov	r1, r4
 800173c:	4628      	mov	r0, r5
 800173e:	f000 f8c5 	bl	80018cc <__swsetup_r>
 8001742:	b380      	cbz	r0, 80017a6 <_puts_r+0x9a>
 8001744:	f04f 35ff 	mov.w	r5, #4294967295
 8001748:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800174a:	07da      	lsls	r2, r3, #31
 800174c:	d405      	bmi.n	800175a <_puts_r+0x4e>
 800174e:	89a3      	ldrh	r3, [r4, #12]
 8001750:	059b      	lsls	r3, r3, #22
 8001752:	d402      	bmi.n	800175a <_puts_r+0x4e>
 8001754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001756:	f000 f989 	bl	8001a6c <__retarget_lock_release_recursive>
 800175a:	4628      	mov	r0, r5
 800175c:	bd70      	pop	{r4, r5, r6, pc}
 800175e:	2b00      	cmp	r3, #0
 8001760:	da04      	bge.n	800176c <_puts_r+0x60>
 8001762:	69a2      	ldr	r2, [r4, #24]
 8001764:	429a      	cmp	r2, r3
 8001766:	dc17      	bgt.n	8001798 <_puts_r+0x8c>
 8001768:	290a      	cmp	r1, #10
 800176a:	d015      	beq.n	8001798 <_puts_r+0x8c>
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	6022      	str	r2, [r4, #0]
 8001772:	7019      	strb	r1, [r3, #0]
 8001774:	68a3      	ldr	r3, [r4, #8]
 8001776:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800177a:	3b01      	subs	r3, #1
 800177c:	60a3      	str	r3, [r4, #8]
 800177e:	2900      	cmp	r1, #0
 8001780:	d1ed      	bne.n	800175e <_puts_r+0x52>
 8001782:	2b00      	cmp	r3, #0
 8001784:	da11      	bge.n	80017aa <_puts_r+0x9e>
 8001786:	4622      	mov	r2, r4
 8001788:	210a      	movs	r1, #10
 800178a:	4628      	mov	r0, r5
 800178c:	f000 f85f 	bl	800184e <__swbuf_r>
 8001790:	3001      	adds	r0, #1
 8001792:	d0d7      	beq.n	8001744 <_puts_r+0x38>
 8001794:	250a      	movs	r5, #10
 8001796:	e7d7      	b.n	8001748 <_puts_r+0x3c>
 8001798:	4622      	mov	r2, r4
 800179a:	4628      	mov	r0, r5
 800179c:	f000 f857 	bl	800184e <__swbuf_r>
 80017a0:	3001      	adds	r0, #1
 80017a2:	d1e7      	bne.n	8001774 <_puts_r+0x68>
 80017a4:	e7ce      	b.n	8001744 <_puts_r+0x38>
 80017a6:	3e01      	subs	r6, #1
 80017a8:	e7e4      	b.n	8001774 <_puts_r+0x68>
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	6022      	str	r2, [r4, #0]
 80017b0:	220a      	movs	r2, #10
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e7ee      	b.n	8001794 <_puts_r+0x88>
	...

080017b8 <puts>:
 80017b8:	4b02      	ldr	r3, [pc, #8]	@ (80017c4 <puts+0xc>)
 80017ba:	4601      	mov	r1, r0
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	f7ff bfa5 	b.w	800170c <_puts_r>
 80017c2:	bf00      	nop
 80017c4:	20000014 	.word	0x20000014

080017c8 <__sread>:
 80017c8:	b510      	push	{r4, lr}
 80017ca:	460c      	mov	r4, r1
 80017cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017d0:	f000 f8fc 	bl	80019cc <_read_r>
 80017d4:	2800      	cmp	r0, #0
 80017d6:	bfab      	itete	ge
 80017d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80017da:	89a3      	ldrhlt	r3, [r4, #12]
 80017dc:	181b      	addge	r3, r3, r0
 80017de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80017e2:	bfac      	ite	ge
 80017e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80017e6:	81a3      	strhlt	r3, [r4, #12]
 80017e8:	bd10      	pop	{r4, pc}

080017ea <__swrite>:
 80017ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ee:	461f      	mov	r7, r3
 80017f0:	898b      	ldrh	r3, [r1, #12]
 80017f2:	05db      	lsls	r3, r3, #23
 80017f4:	4605      	mov	r5, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	4616      	mov	r6, r2
 80017fa:	d505      	bpl.n	8001808 <__swrite+0x1e>
 80017fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001800:	2302      	movs	r3, #2
 8001802:	2200      	movs	r2, #0
 8001804:	f000 f8d0 	bl	80019a8 <_lseek_r>
 8001808:	89a3      	ldrh	r3, [r4, #12]
 800180a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800180e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001812:	81a3      	strh	r3, [r4, #12]
 8001814:	4632      	mov	r2, r6
 8001816:	463b      	mov	r3, r7
 8001818:	4628      	mov	r0, r5
 800181a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800181e:	f000 b8e7 	b.w	80019f0 <_write_r>

08001822 <__sseek>:
 8001822:	b510      	push	{r4, lr}
 8001824:	460c      	mov	r4, r1
 8001826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800182a:	f000 f8bd 	bl	80019a8 <_lseek_r>
 800182e:	1c43      	adds	r3, r0, #1
 8001830:	89a3      	ldrh	r3, [r4, #12]
 8001832:	bf15      	itete	ne
 8001834:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001836:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800183a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800183e:	81a3      	strheq	r3, [r4, #12]
 8001840:	bf18      	it	ne
 8001842:	81a3      	strhne	r3, [r4, #12]
 8001844:	bd10      	pop	{r4, pc}

08001846 <__sclose>:
 8001846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800184a:	f000 b89d 	b.w	8001988 <_close_r>

0800184e <__swbuf_r>:
 800184e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001850:	460e      	mov	r6, r1
 8001852:	4614      	mov	r4, r2
 8001854:	4605      	mov	r5, r0
 8001856:	b118      	cbz	r0, 8001860 <__swbuf_r+0x12>
 8001858:	6a03      	ldr	r3, [r0, #32]
 800185a:	b90b      	cbnz	r3, 8001860 <__swbuf_r+0x12>
 800185c:	f7ff ff0e 	bl	800167c <__sinit>
 8001860:	69a3      	ldr	r3, [r4, #24]
 8001862:	60a3      	str	r3, [r4, #8]
 8001864:	89a3      	ldrh	r3, [r4, #12]
 8001866:	071a      	lsls	r2, r3, #28
 8001868:	d501      	bpl.n	800186e <__swbuf_r+0x20>
 800186a:	6923      	ldr	r3, [r4, #16]
 800186c:	b943      	cbnz	r3, 8001880 <__swbuf_r+0x32>
 800186e:	4621      	mov	r1, r4
 8001870:	4628      	mov	r0, r5
 8001872:	f000 f82b 	bl	80018cc <__swsetup_r>
 8001876:	b118      	cbz	r0, 8001880 <__swbuf_r+0x32>
 8001878:	f04f 37ff 	mov.w	r7, #4294967295
 800187c:	4638      	mov	r0, r7
 800187e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	6922      	ldr	r2, [r4, #16]
 8001884:	1a98      	subs	r0, r3, r2
 8001886:	6963      	ldr	r3, [r4, #20]
 8001888:	b2f6      	uxtb	r6, r6
 800188a:	4283      	cmp	r3, r0
 800188c:	4637      	mov	r7, r6
 800188e:	dc05      	bgt.n	800189c <__swbuf_r+0x4e>
 8001890:	4621      	mov	r1, r4
 8001892:	4628      	mov	r0, r5
 8001894:	f000 fd3e 	bl	8002314 <_fflush_r>
 8001898:	2800      	cmp	r0, #0
 800189a:	d1ed      	bne.n	8001878 <__swbuf_r+0x2a>
 800189c:	68a3      	ldr	r3, [r4, #8]
 800189e:	3b01      	subs	r3, #1
 80018a0:	60a3      	str	r3, [r4, #8]
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	6022      	str	r2, [r4, #0]
 80018a8:	701e      	strb	r6, [r3, #0]
 80018aa:	6962      	ldr	r2, [r4, #20]
 80018ac:	1c43      	adds	r3, r0, #1
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d004      	beq.n	80018bc <__swbuf_r+0x6e>
 80018b2:	89a3      	ldrh	r3, [r4, #12]
 80018b4:	07db      	lsls	r3, r3, #31
 80018b6:	d5e1      	bpl.n	800187c <__swbuf_r+0x2e>
 80018b8:	2e0a      	cmp	r6, #10
 80018ba:	d1df      	bne.n	800187c <__swbuf_r+0x2e>
 80018bc:	4621      	mov	r1, r4
 80018be:	4628      	mov	r0, r5
 80018c0:	f000 fd28 	bl	8002314 <_fflush_r>
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d0d9      	beq.n	800187c <__swbuf_r+0x2e>
 80018c8:	e7d6      	b.n	8001878 <__swbuf_r+0x2a>
	...

080018cc <__swsetup_r>:
 80018cc:	b538      	push	{r3, r4, r5, lr}
 80018ce:	4b29      	ldr	r3, [pc, #164]	@ (8001974 <__swsetup_r+0xa8>)
 80018d0:	4605      	mov	r5, r0
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	460c      	mov	r4, r1
 80018d6:	b118      	cbz	r0, 80018e0 <__swsetup_r+0x14>
 80018d8:	6a03      	ldr	r3, [r0, #32]
 80018da:	b90b      	cbnz	r3, 80018e0 <__swsetup_r+0x14>
 80018dc:	f7ff fece 	bl	800167c <__sinit>
 80018e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018e4:	0719      	lsls	r1, r3, #28
 80018e6:	d422      	bmi.n	800192e <__swsetup_r+0x62>
 80018e8:	06da      	lsls	r2, r3, #27
 80018ea:	d407      	bmi.n	80018fc <__swsetup_r+0x30>
 80018ec:	2209      	movs	r2, #9
 80018ee:	602a      	str	r2, [r5, #0]
 80018f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f4:	81a3      	strh	r3, [r4, #12]
 80018f6:	f04f 30ff 	mov.w	r0, #4294967295
 80018fa:	e033      	b.n	8001964 <__swsetup_r+0x98>
 80018fc:	0758      	lsls	r0, r3, #29
 80018fe:	d512      	bpl.n	8001926 <__swsetup_r+0x5a>
 8001900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001902:	b141      	cbz	r1, 8001916 <__swsetup_r+0x4a>
 8001904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001908:	4299      	cmp	r1, r3
 800190a:	d002      	beq.n	8001912 <__swsetup_r+0x46>
 800190c:	4628      	mov	r0, r5
 800190e:	f000 f8b5 	bl	8001a7c <_free_r>
 8001912:	2300      	movs	r3, #0
 8001914:	6363      	str	r3, [r4, #52]	@ 0x34
 8001916:	89a3      	ldrh	r3, [r4, #12]
 8001918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800191c:	81a3      	strh	r3, [r4, #12]
 800191e:	2300      	movs	r3, #0
 8001920:	6063      	str	r3, [r4, #4]
 8001922:	6923      	ldr	r3, [r4, #16]
 8001924:	6023      	str	r3, [r4, #0]
 8001926:	89a3      	ldrh	r3, [r4, #12]
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	81a3      	strh	r3, [r4, #12]
 800192e:	6923      	ldr	r3, [r4, #16]
 8001930:	b94b      	cbnz	r3, 8001946 <__swsetup_r+0x7a>
 8001932:	89a3      	ldrh	r3, [r4, #12]
 8001934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800193c:	d003      	beq.n	8001946 <__swsetup_r+0x7a>
 800193e:	4621      	mov	r1, r4
 8001940:	4628      	mov	r0, r5
 8001942:	f000 fd35 	bl	80023b0 <__smakebuf_r>
 8001946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800194a:	f013 0201 	ands.w	r2, r3, #1
 800194e:	d00a      	beq.n	8001966 <__swsetup_r+0x9a>
 8001950:	2200      	movs	r2, #0
 8001952:	60a2      	str	r2, [r4, #8]
 8001954:	6962      	ldr	r2, [r4, #20]
 8001956:	4252      	negs	r2, r2
 8001958:	61a2      	str	r2, [r4, #24]
 800195a:	6922      	ldr	r2, [r4, #16]
 800195c:	b942      	cbnz	r2, 8001970 <__swsetup_r+0xa4>
 800195e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001962:	d1c5      	bne.n	80018f0 <__swsetup_r+0x24>
 8001964:	bd38      	pop	{r3, r4, r5, pc}
 8001966:	0799      	lsls	r1, r3, #30
 8001968:	bf58      	it	pl
 800196a:	6962      	ldrpl	r2, [r4, #20]
 800196c:	60a2      	str	r2, [r4, #8]
 800196e:	e7f4      	b.n	800195a <__swsetup_r+0x8e>
 8001970:	2000      	movs	r0, #0
 8001972:	e7f7      	b.n	8001964 <__swsetup_r+0x98>
 8001974:	20000014 	.word	0x20000014

08001978 <memset>:
 8001978:	4402      	add	r2, r0
 800197a:	4603      	mov	r3, r0
 800197c:	4293      	cmp	r3, r2
 800197e:	d100      	bne.n	8001982 <memset+0xa>
 8001980:	4770      	bx	lr
 8001982:	f803 1b01 	strb.w	r1, [r3], #1
 8001986:	e7f9      	b.n	800197c <memset+0x4>

08001988 <_close_r>:
 8001988:	b538      	push	{r3, r4, r5, lr}
 800198a:	4d06      	ldr	r5, [pc, #24]	@ (80019a4 <_close_r+0x1c>)
 800198c:	2300      	movs	r3, #0
 800198e:	4604      	mov	r4, r0
 8001990:	4608      	mov	r0, r1
 8001992:	602b      	str	r3, [r5, #0]
 8001994:	f7ff fc02 	bl	800119c <_close>
 8001998:	1c43      	adds	r3, r0, #1
 800199a:	d102      	bne.n	80019a2 <_close_r+0x1a>
 800199c:	682b      	ldr	r3, [r5, #0]
 800199e:	b103      	cbz	r3, 80019a2 <_close_r+0x1a>
 80019a0:	6023      	str	r3, [r4, #0]
 80019a2:	bd38      	pop	{r3, r4, r5, pc}
 80019a4:	2000026c 	.word	0x2000026c

080019a8 <_lseek_r>:
 80019a8:	b538      	push	{r3, r4, r5, lr}
 80019aa:	4d07      	ldr	r5, [pc, #28]	@ (80019c8 <_lseek_r+0x20>)
 80019ac:	4604      	mov	r4, r0
 80019ae:	4608      	mov	r0, r1
 80019b0:	4611      	mov	r1, r2
 80019b2:	2200      	movs	r2, #0
 80019b4:	602a      	str	r2, [r5, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	f7ff fbb1 	bl	800111e <_lseek>
 80019bc:	1c43      	adds	r3, r0, #1
 80019be:	d102      	bne.n	80019c6 <_lseek_r+0x1e>
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	b103      	cbz	r3, 80019c6 <_lseek_r+0x1e>
 80019c4:	6023      	str	r3, [r4, #0]
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
 80019c8:	2000026c 	.word	0x2000026c

080019cc <_read_r>:
 80019cc:	b538      	push	{r3, r4, r5, lr}
 80019ce:	4d07      	ldr	r5, [pc, #28]	@ (80019ec <_read_r+0x20>)
 80019d0:	4604      	mov	r4, r0
 80019d2:	4608      	mov	r0, r1
 80019d4:	4611      	mov	r1, r2
 80019d6:	2200      	movs	r2, #0
 80019d8:	602a      	str	r2, [r5, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	f7ff fb49 	bl	8001072 <_read>
 80019e0:	1c43      	adds	r3, r0, #1
 80019e2:	d102      	bne.n	80019ea <_read_r+0x1e>
 80019e4:	682b      	ldr	r3, [r5, #0]
 80019e6:	b103      	cbz	r3, 80019ea <_read_r+0x1e>
 80019e8:	6023      	str	r3, [r4, #0]
 80019ea:	bd38      	pop	{r3, r4, r5, pc}
 80019ec:	2000026c 	.word	0x2000026c

080019f0 <_write_r>:
 80019f0:	b538      	push	{r3, r4, r5, lr}
 80019f2:	4d07      	ldr	r5, [pc, #28]	@ (8001a10 <_write_r+0x20>)
 80019f4:	4604      	mov	r4, r0
 80019f6:	4608      	mov	r0, r1
 80019f8:	4611      	mov	r1, r2
 80019fa:	2200      	movs	r2, #0
 80019fc:	602a      	str	r2, [r5, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	f7ff fb9f 	bl	8001142 <_write>
 8001a04:	1c43      	adds	r3, r0, #1
 8001a06:	d102      	bne.n	8001a0e <_write_r+0x1e>
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	b103      	cbz	r3, 8001a0e <_write_r+0x1e>
 8001a0c:	6023      	str	r3, [r4, #0]
 8001a0e:	bd38      	pop	{r3, r4, r5, pc}
 8001a10:	2000026c 	.word	0x2000026c

08001a14 <__errno>:
 8001a14:	4b01      	ldr	r3, [pc, #4]	@ (8001a1c <__errno+0x8>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000014 	.word	0x20000014

08001a20 <__libc_init_array>:
 8001a20:	b570      	push	{r4, r5, r6, lr}
 8001a22:	4d0d      	ldr	r5, [pc, #52]	@ (8001a58 <__libc_init_array+0x38>)
 8001a24:	4c0d      	ldr	r4, [pc, #52]	@ (8001a5c <__libc_init_array+0x3c>)
 8001a26:	1b64      	subs	r4, r4, r5
 8001a28:	10a4      	asrs	r4, r4, #2
 8001a2a:	2600      	movs	r6, #0
 8001a2c:	42a6      	cmp	r6, r4
 8001a2e:	d109      	bne.n	8001a44 <__libc_init_array+0x24>
 8001a30:	4d0b      	ldr	r5, [pc, #44]	@ (8001a60 <__libc_init_array+0x40>)
 8001a32:	4c0c      	ldr	r4, [pc, #48]	@ (8001a64 <__libc_init_array+0x44>)
 8001a34:	f000 fd78 	bl	8002528 <_init>
 8001a38:	1b64      	subs	r4, r4, r5
 8001a3a:	10a4      	asrs	r4, r4, #2
 8001a3c:	2600      	movs	r6, #0
 8001a3e:	42a6      	cmp	r6, r4
 8001a40:	d105      	bne.n	8001a4e <__libc_init_array+0x2e>
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a48:	4798      	blx	r3
 8001a4a:	3601      	adds	r6, #1
 8001a4c:	e7ee      	b.n	8001a2c <__libc_init_array+0xc>
 8001a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a52:	4798      	blx	r3
 8001a54:	3601      	adds	r6, #1
 8001a56:	e7f2      	b.n	8001a3e <__libc_init_array+0x1e>
 8001a58:	080026c4 	.word	0x080026c4
 8001a5c:	080026c4 	.word	0x080026c4
 8001a60:	080026c4 	.word	0x080026c4
 8001a64:	080026c8 	.word	0x080026c8

08001a68 <__retarget_lock_init_recursive>:
 8001a68:	4770      	bx	lr

08001a6a <__retarget_lock_acquire_recursive>:
 8001a6a:	4770      	bx	lr

08001a6c <__retarget_lock_release_recursive>:
 8001a6c:	4770      	bx	lr

08001a6e <abort>:
 8001a6e:	b508      	push	{r3, lr}
 8001a70:	2006      	movs	r0, #6
 8001a72:	f000 fd01 	bl	8002478 <raise>
 8001a76:	2001      	movs	r0, #1
 8001a78:	f000 fd54 	bl	8002524 <_exit>

08001a7c <_free_r>:
 8001a7c:	b538      	push	{r3, r4, r5, lr}
 8001a7e:	4605      	mov	r5, r0
 8001a80:	2900      	cmp	r1, #0
 8001a82:	d041      	beq.n	8001b08 <_free_r+0x8c>
 8001a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a88:	1f0c      	subs	r4, r1, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bfb8      	it	lt
 8001a8e:	18e4      	addlt	r4, r4, r3
 8001a90:	f000 f8e0 	bl	8001c54 <__malloc_lock>
 8001a94:	4a1d      	ldr	r2, [pc, #116]	@ (8001b0c <_free_r+0x90>)
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	b933      	cbnz	r3, 8001aa8 <_free_r+0x2c>
 8001a9a:	6063      	str	r3, [r4, #4]
 8001a9c:	6014      	str	r4, [r2, #0]
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aa4:	f000 b8dc 	b.w	8001c60 <__malloc_unlock>
 8001aa8:	42a3      	cmp	r3, r4
 8001aaa:	d908      	bls.n	8001abe <_free_r+0x42>
 8001aac:	6820      	ldr	r0, [r4, #0]
 8001aae:	1821      	adds	r1, r4, r0
 8001ab0:	428b      	cmp	r3, r1
 8001ab2:	bf01      	itttt	eq
 8001ab4:	6819      	ldreq	r1, [r3, #0]
 8001ab6:	685b      	ldreq	r3, [r3, #4]
 8001ab8:	1809      	addeq	r1, r1, r0
 8001aba:	6021      	streq	r1, [r4, #0]
 8001abc:	e7ed      	b.n	8001a9a <_free_r+0x1e>
 8001abe:	461a      	mov	r2, r3
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	b10b      	cbz	r3, 8001ac8 <_free_r+0x4c>
 8001ac4:	42a3      	cmp	r3, r4
 8001ac6:	d9fa      	bls.n	8001abe <_free_r+0x42>
 8001ac8:	6811      	ldr	r1, [r2, #0]
 8001aca:	1850      	adds	r0, r2, r1
 8001acc:	42a0      	cmp	r0, r4
 8001ace:	d10b      	bne.n	8001ae8 <_free_r+0x6c>
 8001ad0:	6820      	ldr	r0, [r4, #0]
 8001ad2:	4401      	add	r1, r0
 8001ad4:	1850      	adds	r0, r2, r1
 8001ad6:	4283      	cmp	r3, r0
 8001ad8:	6011      	str	r1, [r2, #0]
 8001ada:	d1e0      	bne.n	8001a9e <_free_r+0x22>
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	6053      	str	r3, [r2, #4]
 8001ae2:	4408      	add	r0, r1
 8001ae4:	6010      	str	r0, [r2, #0]
 8001ae6:	e7da      	b.n	8001a9e <_free_r+0x22>
 8001ae8:	d902      	bls.n	8001af0 <_free_r+0x74>
 8001aea:	230c      	movs	r3, #12
 8001aec:	602b      	str	r3, [r5, #0]
 8001aee:	e7d6      	b.n	8001a9e <_free_r+0x22>
 8001af0:	6820      	ldr	r0, [r4, #0]
 8001af2:	1821      	adds	r1, r4, r0
 8001af4:	428b      	cmp	r3, r1
 8001af6:	bf04      	itt	eq
 8001af8:	6819      	ldreq	r1, [r3, #0]
 8001afa:	685b      	ldreq	r3, [r3, #4]
 8001afc:	6063      	str	r3, [r4, #4]
 8001afe:	bf04      	itt	eq
 8001b00:	1809      	addeq	r1, r1, r0
 8001b02:	6021      	streq	r1, [r4, #0]
 8001b04:	6054      	str	r4, [r2, #4]
 8001b06:	e7ca      	b.n	8001a9e <_free_r+0x22>
 8001b08:	bd38      	pop	{r3, r4, r5, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000278 	.word	0x20000278

08001b10 <sbrk_aligned>:
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	4e0f      	ldr	r6, [pc, #60]	@ (8001b50 <sbrk_aligned+0x40>)
 8001b14:	460c      	mov	r4, r1
 8001b16:	6831      	ldr	r1, [r6, #0]
 8001b18:	4605      	mov	r5, r0
 8001b1a:	b911      	cbnz	r1, 8001b22 <sbrk_aligned+0x12>
 8001b1c:	f000 fcea 	bl	80024f4 <_sbrk_r>
 8001b20:	6030      	str	r0, [r6, #0]
 8001b22:	4621      	mov	r1, r4
 8001b24:	4628      	mov	r0, r5
 8001b26:	f000 fce5 	bl	80024f4 <_sbrk_r>
 8001b2a:	1c43      	adds	r3, r0, #1
 8001b2c:	d103      	bne.n	8001b36 <sbrk_aligned+0x26>
 8001b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8001b32:	4620      	mov	r0, r4
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
 8001b36:	1cc4      	adds	r4, r0, #3
 8001b38:	f024 0403 	bic.w	r4, r4, #3
 8001b3c:	42a0      	cmp	r0, r4
 8001b3e:	d0f8      	beq.n	8001b32 <sbrk_aligned+0x22>
 8001b40:	1a21      	subs	r1, r4, r0
 8001b42:	4628      	mov	r0, r5
 8001b44:	f000 fcd6 	bl	80024f4 <_sbrk_r>
 8001b48:	3001      	adds	r0, #1
 8001b4a:	d1f2      	bne.n	8001b32 <sbrk_aligned+0x22>
 8001b4c:	e7ef      	b.n	8001b2e <sbrk_aligned+0x1e>
 8001b4e:	bf00      	nop
 8001b50:	20000274 	.word	0x20000274

08001b54 <_malloc_r>:
 8001b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b58:	1ccd      	adds	r5, r1, #3
 8001b5a:	f025 0503 	bic.w	r5, r5, #3
 8001b5e:	3508      	adds	r5, #8
 8001b60:	2d0c      	cmp	r5, #12
 8001b62:	bf38      	it	cc
 8001b64:	250c      	movcc	r5, #12
 8001b66:	2d00      	cmp	r5, #0
 8001b68:	4606      	mov	r6, r0
 8001b6a:	db01      	blt.n	8001b70 <_malloc_r+0x1c>
 8001b6c:	42a9      	cmp	r1, r5
 8001b6e:	d904      	bls.n	8001b7a <_malloc_r+0x26>
 8001b70:	230c      	movs	r3, #12
 8001b72:	6033      	str	r3, [r6, #0]
 8001b74:	2000      	movs	r0, #0
 8001b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c50 <_malloc_r+0xfc>
 8001b7e:	f000 f869 	bl	8001c54 <__malloc_lock>
 8001b82:	f8d8 3000 	ldr.w	r3, [r8]
 8001b86:	461c      	mov	r4, r3
 8001b88:	bb44      	cbnz	r4, 8001bdc <_malloc_r+0x88>
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	4630      	mov	r0, r6
 8001b8e:	f7ff ffbf 	bl	8001b10 <sbrk_aligned>
 8001b92:	1c43      	adds	r3, r0, #1
 8001b94:	4604      	mov	r4, r0
 8001b96:	d158      	bne.n	8001c4a <_malloc_r+0xf6>
 8001b98:	f8d8 4000 	ldr.w	r4, [r8]
 8001b9c:	4627      	mov	r7, r4
 8001b9e:	2f00      	cmp	r7, #0
 8001ba0:	d143      	bne.n	8001c2a <_malloc_r+0xd6>
 8001ba2:	2c00      	cmp	r4, #0
 8001ba4:	d04b      	beq.n	8001c3e <_malloc_r+0xea>
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	4639      	mov	r1, r7
 8001baa:	4630      	mov	r0, r6
 8001bac:	eb04 0903 	add.w	r9, r4, r3
 8001bb0:	f000 fca0 	bl	80024f4 <_sbrk_r>
 8001bb4:	4581      	cmp	r9, r0
 8001bb6:	d142      	bne.n	8001c3e <_malloc_r+0xea>
 8001bb8:	6821      	ldr	r1, [r4, #0]
 8001bba:	1a6d      	subs	r5, r5, r1
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	f7ff ffa6 	bl	8001b10 <sbrk_aligned>
 8001bc4:	3001      	adds	r0, #1
 8001bc6:	d03a      	beq.n	8001c3e <_malloc_r+0xea>
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	442b      	add	r3, r5
 8001bcc:	6023      	str	r3, [r4, #0]
 8001bce:	f8d8 3000 	ldr.w	r3, [r8]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	bb62      	cbnz	r2, 8001c30 <_malloc_r+0xdc>
 8001bd6:	f8c8 7000 	str.w	r7, [r8]
 8001bda:	e00f      	b.n	8001bfc <_malloc_r+0xa8>
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	1b52      	subs	r2, r2, r5
 8001be0:	d420      	bmi.n	8001c24 <_malloc_r+0xd0>
 8001be2:	2a0b      	cmp	r2, #11
 8001be4:	d917      	bls.n	8001c16 <_malloc_r+0xc2>
 8001be6:	1961      	adds	r1, r4, r5
 8001be8:	42a3      	cmp	r3, r4
 8001bea:	6025      	str	r5, [r4, #0]
 8001bec:	bf18      	it	ne
 8001bee:	6059      	strne	r1, [r3, #4]
 8001bf0:	6863      	ldr	r3, [r4, #4]
 8001bf2:	bf08      	it	eq
 8001bf4:	f8c8 1000 	streq.w	r1, [r8]
 8001bf8:	5162      	str	r2, [r4, r5]
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	f000 f82f 	bl	8001c60 <__malloc_unlock>
 8001c02:	f104 000b 	add.w	r0, r4, #11
 8001c06:	1d23      	adds	r3, r4, #4
 8001c08:	f020 0007 	bic.w	r0, r0, #7
 8001c0c:	1ac2      	subs	r2, r0, r3
 8001c0e:	bf1c      	itt	ne
 8001c10:	1a1b      	subne	r3, r3, r0
 8001c12:	50a3      	strne	r3, [r4, r2]
 8001c14:	e7af      	b.n	8001b76 <_malloc_r+0x22>
 8001c16:	6862      	ldr	r2, [r4, #4]
 8001c18:	42a3      	cmp	r3, r4
 8001c1a:	bf0c      	ite	eq
 8001c1c:	f8c8 2000 	streq.w	r2, [r8]
 8001c20:	605a      	strne	r2, [r3, #4]
 8001c22:	e7eb      	b.n	8001bfc <_malloc_r+0xa8>
 8001c24:	4623      	mov	r3, r4
 8001c26:	6864      	ldr	r4, [r4, #4]
 8001c28:	e7ae      	b.n	8001b88 <_malloc_r+0x34>
 8001c2a:	463c      	mov	r4, r7
 8001c2c:	687f      	ldr	r7, [r7, #4]
 8001c2e:	e7b6      	b.n	8001b9e <_malloc_r+0x4a>
 8001c30:	461a      	mov	r2, r3
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	42a3      	cmp	r3, r4
 8001c36:	d1fb      	bne.n	8001c30 <_malloc_r+0xdc>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	6053      	str	r3, [r2, #4]
 8001c3c:	e7de      	b.n	8001bfc <_malloc_r+0xa8>
 8001c3e:	230c      	movs	r3, #12
 8001c40:	6033      	str	r3, [r6, #0]
 8001c42:	4630      	mov	r0, r6
 8001c44:	f000 f80c 	bl	8001c60 <__malloc_unlock>
 8001c48:	e794      	b.n	8001b74 <_malloc_r+0x20>
 8001c4a:	6005      	str	r5, [r0, #0]
 8001c4c:	e7d6      	b.n	8001bfc <_malloc_r+0xa8>
 8001c4e:	bf00      	nop
 8001c50:	20000278 	.word	0x20000278

08001c54 <__malloc_lock>:
 8001c54:	4801      	ldr	r0, [pc, #4]	@ (8001c5c <__malloc_lock+0x8>)
 8001c56:	f7ff bf08 	b.w	8001a6a <__retarget_lock_acquire_recursive>
 8001c5a:	bf00      	nop
 8001c5c:	20000270 	.word	0x20000270

08001c60 <__malloc_unlock>:
 8001c60:	4801      	ldr	r0, [pc, #4]	@ (8001c68 <__malloc_unlock+0x8>)
 8001c62:	f7ff bf03 	b.w	8001a6c <__retarget_lock_release_recursive>
 8001c66:	bf00      	nop
 8001c68:	20000270 	.word	0x20000270

08001c6c <__sfputc_r>:
 8001c6c:	6893      	ldr	r3, [r2, #8]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	b410      	push	{r4}
 8001c74:	6093      	str	r3, [r2, #8]
 8001c76:	da08      	bge.n	8001c8a <__sfputc_r+0x1e>
 8001c78:	6994      	ldr	r4, [r2, #24]
 8001c7a:	42a3      	cmp	r3, r4
 8001c7c:	db01      	blt.n	8001c82 <__sfputc_r+0x16>
 8001c7e:	290a      	cmp	r1, #10
 8001c80:	d103      	bne.n	8001c8a <__sfputc_r+0x1e>
 8001c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c86:	f7ff bde2 	b.w	800184e <__swbuf_r>
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	1c58      	adds	r0, r3, #1
 8001c8e:	6010      	str	r0, [r2, #0]
 8001c90:	7019      	strb	r1, [r3, #0]
 8001c92:	4608      	mov	r0, r1
 8001c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <__sfputs_r>:
 8001c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9c:	4606      	mov	r6, r0
 8001c9e:	460f      	mov	r7, r1
 8001ca0:	4614      	mov	r4, r2
 8001ca2:	18d5      	adds	r5, r2, r3
 8001ca4:	42ac      	cmp	r4, r5
 8001ca6:	d101      	bne.n	8001cac <__sfputs_r+0x12>
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e007      	b.n	8001cbc <__sfputs_r+0x22>
 8001cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cb0:	463a      	mov	r2, r7
 8001cb2:	4630      	mov	r0, r6
 8001cb4:	f7ff ffda 	bl	8001c6c <__sfputc_r>
 8001cb8:	1c43      	adds	r3, r0, #1
 8001cba:	d1f3      	bne.n	8001ca4 <__sfputs_r+0xa>
 8001cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cc0 <_vfiprintf_r>:
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	b09d      	sub	sp, #116	@ 0x74
 8001cc8:	4614      	mov	r4, r2
 8001cca:	4698      	mov	r8, r3
 8001ccc:	4606      	mov	r6, r0
 8001cce:	b118      	cbz	r0, 8001cd8 <_vfiprintf_r+0x18>
 8001cd0:	6a03      	ldr	r3, [r0, #32]
 8001cd2:	b90b      	cbnz	r3, 8001cd8 <_vfiprintf_r+0x18>
 8001cd4:	f7ff fcd2 	bl	800167c <__sinit>
 8001cd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001cda:	07d9      	lsls	r1, r3, #31
 8001cdc:	d405      	bmi.n	8001cea <_vfiprintf_r+0x2a>
 8001cde:	89ab      	ldrh	r3, [r5, #12]
 8001ce0:	059a      	lsls	r2, r3, #22
 8001ce2:	d402      	bmi.n	8001cea <_vfiprintf_r+0x2a>
 8001ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ce6:	f7ff fec0 	bl	8001a6a <__retarget_lock_acquire_recursive>
 8001cea:	89ab      	ldrh	r3, [r5, #12]
 8001cec:	071b      	lsls	r3, r3, #28
 8001cee:	d501      	bpl.n	8001cf4 <_vfiprintf_r+0x34>
 8001cf0:	692b      	ldr	r3, [r5, #16]
 8001cf2:	b99b      	cbnz	r3, 8001d1c <_vfiprintf_r+0x5c>
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	f7ff fde8 	bl	80018cc <__swsetup_r>
 8001cfc:	b170      	cbz	r0, 8001d1c <_vfiprintf_r+0x5c>
 8001cfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d00:	07dc      	lsls	r4, r3, #31
 8001d02:	d504      	bpl.n	8001d0e <_vfiprintf_r+0x4e>
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	b01d      	add	sp, #116	@ 0x74
 8001d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d0e:	89ab      	ldrh	r3, [r5, #12]
 8001d10:	0598      	lsls	r0, r3, #22
 8001d12:	d4f7      	bmi.n	8001d04 <_vfiprintf_r+0x44>
 8001d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d16:	f7ff fea9 	bl	8001a6c <__retarget_lock_release_recursive>
 8001d1a:	e7f3      	b.n	8001d04 <_vfiprintf_r+0x44>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d20:	2320      	movs	r3, #32
 8001d22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d2a:	2330      	movs	r3, #48	@ 0x30
 8001d2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001edc <_vfiprintf_r+0x21c>
 8001d30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d34:	f04f 0901 	mov.w	r9, #1
 8001d38:	4623      	mov	r3, r4
 8001d3a:	469a      	mov	sl, r3
 8001d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d40:	b10a      	cbz	r2, 8001d46 <_vfiprintf_r+0x86>
 8001d42:	2a25      	cmp	r2, #37	@ 0x25
 8001d44:	d1f9      	bne.n	8001d3a <_vfiprintf_r+0x7a>
 8001d46:	ebba 0b04 	subs.w	fp, sl, r4
 8001d4a:	d00b      	beq.n	8001d64 <_vfiprintf_r+0xa4>
 8001d4c:	465b      	mov	r3, fp
 8001d4e:	4622      	mov	r2, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	4630      	mov	r0, r6
 8001d54:	f7ff ffa1 	bl	8001c9a <__sfputs_r>
 8001d58:	3001      	adds	r0, #1
 8001d5a:	f000 80a7 	beq.w	8001eac <_vfiprintf_r+0x1ec>
 8001d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d60:	445a      	add	r2, fp
 8001d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d64:	f89a 3000 	ldrb.w	r3, [sl]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 809f 	beq.w	8001eac <_vfiprintf_r+0x1ec>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d78:	f10a 0a01 	add.w	sl, sl, #1
 8001d7c:	9304      	str	r3, [sp, #16]
 8001d7e:	9307      	str	r3, [sp, #28]
 8001d80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001d84:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d86:	4654      	mov	r4, sl
 8001d88:	2205      	movs	r2, #5
 8001d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d8e:	4853      	ldr	r0, [pc, #332]	@ (8001edc <_vfiprintf_r+0x21c>)
 8001d90:	f7fe fa26 	bl	80001e0 <memchr>
 8001d94:	9a04      	ldr	r2, [sp, #16]
 8001d96:	b9d8      	cbnz	r0, 8001dd0 <_vfiprintf_r+0x110>
 8001d98:	06d1      	lsls	r1, r2, #27
 8001d9a:	bf44      	itt	mi
 8001d9c:	2320      	movmi	r3, #32
 8001d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001da2:	0713      	lsls	r3, r2, #28
 8001da4:	bf44      	itt	mi
 8001da6:	232b      	movmi	r3, #43	@ 0x2b
 8001da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001dac:	f89a 3000 	ldrb.w	r3, [sl]
 8001db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001db2:	d015      	beq.n	8001de0 <_vfiprintf_r+0x120>
 8001db4:	9a07      	ldr	r2, [sp, #28]
 8001db6:	4654      	mov	r4, sl
 8001db8:	2000      	movs	r0, #0
 8001dba:	f04f 0c0a 	mov.w	ip, #10
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dc4:	3b30      	subs	r3, #48	@ 0x30
 8001dc6:	2b09      	cmp	r3, #9
 8001dc8:	d94b      	bls.n	8001e62 <_vfiprintf_r+0x1a2>
 8001dca:	b1b0      	cbz	r0, 8001dfa <_vfiprintf_r+0x13a>
 8001dcc:	9207      	str	r2, [sp, #28]
 8001dce:	e014      	b.n	8001dfa <_vfiprintf_r+0x13a>
 8001dd0:	eba0 0308 	sub.w	r3, r0, r8
 8001dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	9304      	str	r3, [sp, #16]
 8001ddc:	46a2      	mov	sl, r4
 8001dde:	e7d2      	b.n	8001d86 <_vfiprintf_r+0xc6>
 8001de0:	9b03      	ldr	r3, [sp, #12]
 8001de2:	1d19      	adds	r1, r3, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	9103      	str	r1, [sp, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bfbb      	ittet	lt
 8001dec:	425b      	neglt	r3, r3
 8001dee:	f042 0202 	orrlt.w	r2, r2, #2
 8001df2:	9307      	strge	r3, [sp, #28]
 8001df4:	9307      	strlt	r3, [sp, #28]
 8001df6:	bfb8      	it	lt
 8001df8:	9204      	strlt	r2, [sp, #16]
 8001dfa:	7823      	ldrb	r3, [r4, #0]
 8001dfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001dfe:	d10a      	bne.n	8001e16 <_vfiprintf_r+0x156>
 8001e00:	7863      	ldrb	r3, [r4, #1]
 8001e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e04:	d132      	bne.n	8001e6c <_vfiprintf_r+0x1ac>
 8001e06:	9b03      	ldr	r3, [sp, #12]
 8001e08:	1d1a      	adds	r2, r3, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	9203      	str	r2, [sp, #12]
 8001e0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e12:	3402      	adds	r4, #2
 8001e14:	9305      	str	r3, [sp, #20]
 8001e16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001eec <_vfiprintf_r+0x22c>
 8001e1a:	7821      	ldrb	r1, [r4, #0]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	4650      	mov	r0, sl
 8001e20:	f7fe f9de 	bl	80001e0 <memchr>
 8001e24:	b138      	cbz	r0, 8001e36 <_vfiprintf_r+0x176>
 8001e26:	9b04      	ldr	r3, [sp, #16]
 8001e28:	eba0 000a 	sub.w	r0, r0, sl
 8001e2c:	2240      	movs	r2, #64	@ 0x40
 8001e2e:	4082      	lsls	r2, r0
 8001e30:	4313      	orrs	r3, r2
 8001e32:	3401      	adds	r4, #1
 8001e34:	9304      	str	r3, [sp, #16]
 8001e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e3a:	4829      	ldr	r0, [pc, #164]	@ (8001ee0 <_vfiprintf_r+0x220>)
 8001e3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e40:	2206      	movs	r2, #6
 8001e42:	f7fe f9cd 	bl	80001e0 <memchr>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d03f      	beq.n	8001eca <_vfiprintf_r+0x20a>
 8001e4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ee4 <_vfiprintf_r+0x224>)
 8001e4c:	bb1b      	cbnz	r3, 8001e96 <_vfiprintf_r+0x1d6>
 8001e4e:	9b03      	ldr	r3, [sp, #12]
 8001e50:	3307      	adds	r3, #7
 8001e52:	f023 0307 	bic.w	r3, r3, #7
 8001e56:	3308      	adds	r3, #8
 8001e58:	9303      	str	r3, [sp, #12]
 8001e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e5c:	443b      	add	r3, r7
 8001e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e60:	e76a      	b.n	8001d38 <_vfiprintf_r+0x78>
 8001e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e66:	460c      	mov	r4, r1
 8001e68:	2001      	movs	r0, #1
 8001e6a:	e7a8      	b.n	8001dbe <_vfiprintf_r+0xfe>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	3401      	adds	r4, #1
 8001e70:	9305      	str	r3, [sp, #20]
 8001e72:	4619      	mov	r1, r3
 8001e74:	f04f 0c0a 	mov.w	ip, #10
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e7e:	3a30      	subs	r2, #48	@ 0x30
 8001e80:	2a09      	cmp	r2, #9
 8001e82:	d903      	bls.n	8001e8c <_vfiprintf_r+0x1cc>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0c6      	beq.n	8001e16 <_vfiprintf_r+0x156>
 8001e88:	9105      	str	r1, [sp, #20]
 8001e8a:	e7c4      	b.n	8001e16 <_vfiprintf_r+0x156>
 8001e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e90:	4604      	mov	r4, r0
 8001e92:	2301      	movs	r3, #1
 8001e94:	e7f0      	b.n	8001e78 <_vfiprintf_r+0x1b8>
 8001e96:	ab03      	add	r3, sp, #12
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	462a      	mov	r2, r5
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <_vfiprintf_r+0x228>)
 8001e9e:	a904      	add	r1, sp, #16
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	f3af 8000 	nop.w
 8001ea6:	4607      	mov	r7, r0
 8001ea8:	1c78      	adds	r0, r7, #1
 8001eaa:	d1d6      	bne.n	8001e5a <_vfiprintf_r+0x19a>
 8001eac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001eae:	07d9      	lsls	r1, r3, #31
 8001eb0:	d405      	bmi.n	8001ebe <_vfiprintf_r+0x1fe>
 8001eb2:	89ab      	ldrh	r3, [r5, #12]
 8001eb4:	059a      	lsls	r2, r3, #22
 8001eb6:	d402      	bmi.n	8001ebe <_vfiprintf_r+0x1fe>
 8001eb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001eba:	f7ff fdd7 	bl	8001a6c <__retarget_lock_release_recursive>
 8001ebe:	89ab      	ldrh	r3, [r5, #12]
 8001ec0:	065b      	lsls	r3, r3, #25
 8001ec2:	f53f af1f 	bmi.w	8001d04 <_vfiprintf_r+0x44>
 8001ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001ec8:	e71e      	b.n	8001d08 <_vfiprintf_r+0x48>
 8001eca:	ab03      	add	r3, sp, #12
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	462a      	mov	r2, r5
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <_vfiprintf_r+0x228>)
 8001ed2:	a904      	add	r1, sp, #16
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f000 f879 	bl	8001fcc <_printf_i>
 8001eda:	e7e4      	b.n	8001ea6 <_vfiprintf_r+0x1e6>
 8001edc:	08002688 	.word	0x08002688
 8001ee0:	08002692 	.word	0x08002692
 8001ee4:	00000000 	.word	0x00000000
 8001ee8:	08001c9b 	.word	0x08001c9b
 8001eec:	0800268e 	.word	0x0800268e

08001ef0 <_printf_common>:
 8001ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef4:	4616      	mov	r6, r2
 8001ef6:	4698      	mov	r8, r3
 8001ef8:	688a      	ldr	r2, [r1, #8]
 8001efa:	690b      	ldr	r3, [r1, #16]
 8001efc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001f00:	4293      	cmp	r3, r2
 8001f02:	bfb8      	it	lt
 8001f04:	4613      	movlt	r3, r2
 8001f06:	6033      	str	r3, [r6, #0]
 8001f08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001f0c:	4607      	mov	r7, r0
 8001f0e:	460c      	mov	r4, r1
 8001f10:	b10a      	cbz	r2, 8001f16 <_printf_common+0x26>
 8001f12:	3301      	adds	r3, #1
 8001f14:	6033      	str	r3, [r6, #0]
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	0699      	lsls	r1, r3, #26
 8001f1a:	bf42      	ittt	mi
 8001f1c:	6833      	ldrmi	r3, [r6, #0]
 8001f1e:	3302      	addmi	r3, #2
 8001f20:	6033      	strmi	r3, [r6, #0]
 8001f22:	6825      	ldr	r5, [r4, #0]
 8001f24:	f015 0506 	ands.w	r5, r5, #6
 8001f28:	d106      	bne.n	8001f38 <_printf_common+0x48>
 8001f2a:	f104 0a19 	add.w	sl, r4, #25
 8001f2e:	68e3      	ldr	r3, [r4, #12]
 8001f30:	6832      	ldr	r2, [r6, #0]
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	42ab      	cmp	r3, r5
 8001f36:	dc26      	bgt.n	8001f86 <_printf_common+0x96>
 8001f38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f3c:	6822      	ldr	r2, [r4, #0]
 8001f3e:	3b00      	subs	r3, #0
 8001f40:	bf18      	it	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	0692      	lsls	r2, r2, #26
 8001f46:	d42b      	bmi.n	8001fa0 <_printf_common+0xb0>
 8001f48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f4c:	4641      	mov	r1, r8
 8001f4e:	4638      	mov	r0, r7
 8001f50:	47c8      	blx	r9
 8001f52:	3001      	adds	r0, #1
 8001f54:	d01e      	beq.n	8001f94 <_printf_common+0xa4>
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	6922      	ldr	r2, [r4, #16]
 8001f5a:	f003 0306 	and.w	r3, r3, #6
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf02      	ittt	eq
 8001f62:	68e5      	ldreq	r5, [r4, #12]
 8001f64:	6833      	ldreq	r3, [r6, #0]
 8001f66:	1aed      	subeq	r5, r5, r3
 8001f68:	68a3      	ldr	r3, [r4, #8]
 8001f6a:	bf0c      	ite	eq
 8001f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f70:	2500      	movne	r5, #0
 8001f72:	4293      	cmp	r3, r2
 8001f74:	bfc4      	itt	gt
 8001f76:	1a9b      	subgt	r3, r3, r2
 8001f78:	18ed      	addgt	r5, r5, r3
 8001f7a:	2600      	movs	r6, #0
 8001f7c:	341a      	adds	r4, #26
 8001f7e:	42b5      	cmp	r5, r6
 8001f80:	d11a      	bne.n	8001fb8 <_printf_common+0xc8>
 8001f82:	2000      	movs	r0, #0
 8001f84:	e008      	b.n	8001f98 <_printf_common+0xa8>
 8001f86:	2301      	movs	r3, #1
 8001f88:	4652      	mov	r2, sl
 8001f8a:	4641      	mov	r1, r8
 8001f8c:	4638      	mov	r0, r7
 8001f8e:	47c8      	blx	r9
 8001f90:	3001      	adds	r0, #1
 8001f92:	d103      	bne.n	8001f9c <_printf_common+0xac>
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f9c:	3501      	adds	r5, #1
 8001f9e:	e7c6      	b.n	8001f2e <_printf_common+0x3e>
 8001fa0:	18e1      	adds	r1, r4, r3
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	2030      	movs	r0, #48	@ 0x30
 8001fa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001faa:	4422      	add	r2, r4
 8001fac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	e7c7      	b.n	8001f48 <_printf_common+0x58>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	4622      	mov	r2, r4
 8001fbc:	4641      	mov	r1, r8
 8001fbe:	4638      	mov	r0, r7
 8001fc0:	47c8      	blx	r9
 8001fc2:	3001      	adds	r0, #1
 8001fc4:	d0e6      	beq.n	8001f94 <_printf_common+0xa4>
 8001fc6:	3601      	adds	r6, #1
 8001fc8:	e7d9      	b.n	8001f7e <_printf_common+0x8e>
	...

08001fcc <_printf_i>:
 8001fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fd0:	7e0f      	ldrb	r7, [r1, #24]
 8001fd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001fd4:	2f78      	cmp	r7, #120	@ 0x78
 8001fd6:	4691      	mov	r9, r2
 8001fd8:	4680      	mov	r8, r0
 8001fda:	460c      	mov	r4, r1
 8001fdc:	469a      	mov	sl, r3
 8001fde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001fe2:	d807      	bhi.n	8001ff4 <_printf_i+0x28>
 8001fe4:	2f62      	cmp	r7, #98	@ 0x62
 8001fe6:	d80a      	bhi.n	8001ffe <_printf_i+0x32>
 8001fe8:	2f00      	cmp	r7, #0
 8001fea:	f000 80d2 	beq.w	8002192 <_printf_i+0x1c6>
 8001fee:	2f58      	cmp	r7, #88	@ 0x58
 8001ff0:	f000 80b9 	beq.w	8002166 <_printf_i+0x19a>
 8001ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ff8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ffc:	e03a      	b.n	8002074 <_printf_i+0xa8>
 8001ffe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002002:	2b15      	cmp	r3, #21
 8002004:	d8f6      	bhi.n	8001ff4 <_printf_i+0x28>
 8002006:	a101      	add	r1, pc, #4	@ (adr r1, 800200c <_printf_i+0x40>)
 8002008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800200c:	08002065 	.word	0x08002065
 8002010:	08002079 	.word	0x08002079
 8002014:	08001ff5 	.word	0x08001ff5
 8002018:	08001ff5 	.word	0x08001ff5
 800201c:	08001ff5 	.word	0x08001ff5
 8002020:	08001ff5 	.word	0x08001ff5
 8002024:	08002079 	.word	0x08002079
 8002028:	08001ff5 	.word	0x08001ff5
 800202c:	08001ff5 	.word	0x08001ff5
 8002030:	08001ff5 	.word	0x08001ff5
 8002034:	08001ff5 	.word	0x08001ff5
 8002038:	08002179 	.word	0x08002179
 800203c:	080020a3 	.word	0x080020a3
 8002040:	08002133 	.word	0x08002133
 8002044:	08001ff5 	.word	0x08001ff5
 8002048:	08001ff5 	.word	0x08001ff5
 800204c:	0800219b 	.word	0x0800219b
 8002050:	08001ff5 	.word	0x08001ff5
 8002054:	080020a3 	.word	0x080020a3
 8002058:	08001ff5 	.word	0x08001ff5
 800205c:	08001ff5 	.word	0x08001ff5
 8002060:	0800213b 	.word	0x0800213b
 8002064:	6833      	ldr	r3, [r6, #0]
 8002066:	1d1a      	adds	r2, r3, #4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6032      	str	r2, [r6, #0]
 800206c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002070:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002074:	2301      	movs	r3, #1
 8002076:	e09d      	b.n	80021b4 <_printf_i+0x1e8>
 8002078:	6833      	ldr	r3, [r6, #0]
 800207a:	6820      	ldr	r0, [r4, #0]
 800207c:	1d19      	adds	r1, r3, #4
 800207e:	6031      	str	r1, [r6, #0]
 8002080:	0606      	lsls	r6, r0, #24
 8002082:	d501      	bpl.n	8002088 <_printf_i+0xbc>
 8002084:	681d      	ldr	r5, [r3, #0]
 8002086:	e003      	b.n	8002090 <_printf_i+0xc4>
 8002088:	0645      	lsls	r5, r0, #25
 800208a:	d5fb      	bpl.n	8002084 <_printf_i+0xb8>
 800208c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002090:	2d00      	cmp	r5, #0
 8002092:	da03      	bge.n	800209c <_printf_i+0xd0>
 8002094:	232d      	movs	r3, #45	@ 0x2d
 8002096:	426d      	negs	r5, r5
 8002098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800209c:	4859      	ldr	r0, [pc, #356]	@ (8002204 <_printf_i+0x238>)
 800209e:	230a      	movs	r3, #10
 80020a0:	e011      	b.n	80020c6 <_printf_i+0xfa>
 80020a2:	6821      	ldr	r1, [r4, #0]
 80020a4:	6833      	ldr	r3, [r6, #0]
 80020a6:	0608      	lsls	r0, r1, #24
 80020a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80020ac:	d402      	bmi.n	80020b4 <_printf_i+0xe8>
 80020ae:	0649      	lsls	r1, r1, #25
 80020b0:	bf48      	it	mi
 80020b2:	b2ad      	uxthmi	r5, r5
 80020b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80020b6:	4853      	ldr	r0, [pc, #332]	@ (8002204 <_printf_i+0x238>)
 80020b8:	6033      	str	r3, [r6, #0]
 80020ba:	bf14      	ite	ne
 80020bc:	230a      	movne	r3, #10
 80020be:	2308      	moveq	r3, #8
 80020c0:	2100      	movs	r1, #0
 80020c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80020c6:	6866      	ldr	r6, [r4, #4]
 80020c8:	60a6      	str	r6, [r4, #8]
 80020ca:	2e00      	cmp	r6, #0
 80020cc:	bfa2      	ittt	ge
 80020ce:	6821      	ldrge	r1, [r4, #0]
 80020d0:	f021 0104 	bicge.w	r1, r1, #4
 80020d4:	6021      	strge	r1, [r4, #0]
 80020d6:	b90d      	cbnz	r5, 80020dc <_printf_i+0x110>
 80020d8:	2e00      	cmp	r6, #0
 80020da:	d04b      	beq.n	8002174 <_printf_i+0x1a8>
 80020dc:	4616      	mov	r6, r2
 80020de:	fbb5 f1f3 	udiv	r1, r5, r3
 80020e2:	fb03 5711 	mls	r7, r3, r1, r5
 80020e6:	5dc7      	ldrb	r7, [r0, r7]
 80020e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020ec:	462f      	mov	r7, r5
 80020ee:	42bb      	cmp	r3, r7
 80020f0:	460d      	mov	r5, r1
 80020f2:	d9f4      	bls.n	80020de <_printf_i+0x112>
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d10b      	bne.n	8002110 <_printf_i+0x144>
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	07df      	lsls	r7, r3, #31
 80020fc:	d508      	bpl.n	8002110 <_printf_i+0x144>
 80020fe:	6923      	ldr	r3, [r4, #16]
 8002100:	6861      	ldr	r1, [r4, #4]
 8002102:	4299      	cmp	r1, r3
 8002104:	bfde      	ittt	le
 8002106:	2330      	movle	r3, #48	@ 0x30
 8002108:	f806 3c01 	strble.w	r3, [r6, #-1]
 800210c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002110:	1b92      	subs	r2, r2, r6
 8002112:	6122      	str	r2, [r4, #16]
 8002114:	f8cd a000 	str.w	sl, [sp]
 8002118:	464b      	mov	r3, r9
 800211a:	aa03      	add	r2, sp, #12
 800211c:	4621      	mov	r1, r4
 800211e:	4640      	mov	r0, r8
 8002120:	f7ff fee6 	bl	8001ef0 <_printf_common>
 8002124:	3001      	adds	r0, #1
 8002126:	d14a      	bne.n	80021be <_printf_i+0x1f2>
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	b004      	add	sp, #16
 800212e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	f043 0320 	orr.w	r3, r3, #32
 8002138:	6023      	str	r3, [r4, #0]
 800213a:	4833      	ldr	r0, [pc, #204]	@ (8002208 <_printf_i+0x23c>)
 800213c:	2778      	movs	r7, #120	@ 0x78
 800213e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	6831      	ldr	r1, [r6, #0]
 8002146:	061f      	lsls	r7, r3, #24
 8002148:	f851 5b04 	ldr.w	r5, [r1], #4
 800214c:	d402      	bmi.n	8002154 <_printf_i+0x188>
 800214e:	065f      	lsls	r7, r3, #25
 8002150:	bf48      	it	mi
 8002152:	b2ad      	uxthmi	r5, r5
 8002154:	6031      	str	r1, [r6, #0]
 8002156:	07d9      	lsls	r1, r3, #31
 8002158:	bf44      	itt	mi
 800215a:	f043 0320 	orrmi.w	r3, r3, #32
 800215e:	6023      	strmi	r3, [r4, #0]
 8002160:	b11d      	cbz	r5, 800216a <_printf_i+0x19e>
 8002162:	2310      	movs	r3, #16
 8002164:	e7ac      	b.n	80020c0 <_printf_i+0xf4>
 8002166:	4827      	ldr	r0, [pc, #156]	@ (8002204 <_printf_i+0x238>)
 8002168:	e7e9      	b.n	800213e <_printf_i+0x172>
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	f023 0320 	bic.w	r3, r3, #32
 8002170:	6023      	str	r3, [r4, #0]
 8002172:	e7f6      	b.n	8002162 <_printf_i+0x196>
 8002174:	4616      	mov	r6, r2
 8002176:	e7bd      	b.n	80020f4 <_printf_i+0x128>
 8002178:	6833      	ldr	r3, [r6, #0]
 800217a:	6825      	ldr	r5, [r4, #0]
 800217c:	6961      	ldr	r1, [r4, #20]
 800217e:	1d18      	adds	r0, r3, #4
 8002180:	6030      	str	r0, [r6, #0]
 8002182:	062e      	lsls	r6, r5, #24
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	d501      	bpl.n	800218c <_printf_i+0x1c0>
 8002188:	6019      	str	r1, [r3, #0]
 800218a:	e002      	b.n	8002192 <_printf_i+0x1c6>
 800218c:	0668      	lsls	r0, r5, #25
 800218e:	d5fb      	bpl.n	8002188 <_printf_i+0x1bc>
 8002190:	8019      	strh	r1, [r3, #0]
 8002192:	2300      	movs	r3, #0
 8002194:	6123      	str	r3, [r4, #16]
 8002196:	4616      	mov	r6, r2
 8002198:	e7bc      	b.n	8002114 <_printf_i+0x148>
 800219a:	6833      	ldr	r3, [r6, #0]
 800219c:	1d1a      	adds	r2, r3, #4
 800219e:	6032      	str	r2, [r6, #0]
 80021a0:	681e      	ldr	r6, [r3, #0]
 80021a2:	6862      	ldr	r2, [r4, #4]
 80021a4:	2100      	movs	r1, #0
 80021a6:	4630      	mov	r0, r6
 80021a8:	f7fe f81a 	bl	80001e0 <memchr>
 80021ac:	b108      	cbz	r0, 80021b2 <_printf_i+0x1e6>
 80021ae:	1b80      	subs	r0, r0, r6
 80021b0:	6060      	str	r0, [r4, #4]
 80021b2:	6863      	ldr	r3, [r4, #4]
 80021b4:	6123      	str	r3, [r4, #16]
 80021b6:	2300      	movs	r3, #0
 80021b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021bc:	e7aa      	b.n	8002114 <_printf_i+0x148>
 80021be:	6923      	ldr	r3, [r4, #16]
 80021c0:	4632      	mov	r2, r6
 80021c2:	4649      	mov	r1, r9
 80021c4:	4640      	mov	r0, r8
 80021c6:	47d0      	blx	sl
 80021c8:	3001      	adds	r0, #1
 80021ca:	d0ad      	beq.n	8002128 <_printf_i+0x15c>
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	079b      	lsls	r3, r3, #30
 80021d0:	d413      	bmi.n	80021fa <_printf_i+0x22e>
 80021d2:	68e0      	ldr	r0, [r4, #12]
 80021d4:	9b03      	ldr	r3, [sp, #12]
 80021d6:	4298      	cmp	r0, r3
 80021d8:	bfb8      	it	lt
 80021da:	4618      	movlt	r0, r3
 80021dc:	e7a6      	b.n	800212c <_printf_i+0x160>
 80021de:	2301      	movs	r3, #1
 80021e0:	4632      	mov	r2, r6
 80021e2:	4649      	mov	r1, r9
 80021e4:	4640      	mov	r0, r8
 80021e6:	47d0      	blx	sl
 80021e8:	3001      	adds	r0, #1
 80021ea:	d09d      	beq.n	8002128 <_printf_i+0x15c>
 80021ec:	3501      	adds	r5, #1
 80021ee:	68e3      	ldr	r3, [r4, #12]
 80021f0:	9903      	ldr	r1, [sp, #12]
 80021f2:	1a5b      	subs	r3, r3, r1
 80021f4:	42ab      	cmp	r3, r5
 80021f6:	dcf2      	bgt.n	80021de <_printf_i+0x212>
 80021f8:	e7eb      	b.n	80021d2 <_printf_i+0x206>
 80021fa:	2500      	movs	r5, #0
 80021fc:	f104 0619 	add.w	r6, r4, #25
 8002200:	e7f5      	b.n	80021ee <_printf_i+0x222>
 8002202:	bf00      	nop
 8002204:	08002699 	.word	0x08002699
 8002208:	080026aa 	.word	0x080026aa

0800220c <__sflush_r>:
 800220c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002214:	0716      	lsls	r6, r2, #28
 8002216:	4605      	mov	r5, r0
 8002218:	460c      	mov	r4, r1
 800221a:	d454      	bmi.n	80022c6 <__sflush_r+0xba>
 800221c:	684b      	ldr	r3, [r1, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	dc02      	bgt.n	8002228 <__sflush_r+0x1c>
 8002222:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002224:	2b00      	cmp	r3, #0
 8002226:	dd48      	ble.n	80022ba <__sflush_r+0xae>
 8002228:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800222a:	2e00      	cmp	r6, #0
 800222c:	d045      	beq.n	80022ba <__sflush_r+0xae>
 800222e:	2300      	movs	r3, #0
 8002230:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002234:	682f      	ldr	r7, [r5, #0]
 8002236:	6a21      	ldr	r1, [r4, #32]
 8002238:	602b      	str	r3, [r5, #0]
 800223a:	d030      	beq.n	800229e <__sflush_r+0x92>
 800223c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800223e:	89a3      	ldrh	r3, [r4, #12]
 8002240:	0759      	lsls	r1, r3, #29
 8002242:	d505      	bpl.n	8002250 <__sflush_r+0x44>
 8002244:	6863      	ldr	r3, [r4, #4]
 8002246:	1ad2      	subs	r2, r2, r3
 8002248:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800224a:	b10b      	cbz	r3, 8002250 <__sflush_r+0x44>
 800224c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800224e:	1ad2      	subs	r2, r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002254:	6a21      	ldr	r1, [r4, #32]
 8002256:	4628      	mov	r0, r5
 8002258:	47b0      	blx	r6
 800225a:	1c43      	adds	r3, r0, #1
 800225c:	89a3      	ldrh	r3, [r4, #12]
 800225e:	d106      	bne.n	800226e <__sflush_r+0x62>
 8002260:	6829      	ldr	r1, [r5, #0]
 8002262:	291d      	cmp	r1, #29
 8002264:	d82b      	bhi.n	80022be <__sflush_r+0xb2>
 8002266:	4a2a      	ldr	r2, [pc, #168]	@ (8002310 <__sflush_r+0x104>)
 8002268:	410a      	asrs	r2, r1
 800226a:	07d6      	lsls	r6, r2, #31
 800226c:	d427      	bmi.n	80022be <__sflush_r+0xb2>
 800226e:	2200      	movs	r2, #0
 8002270:	6062      	str	r2, [r4, #4]
 8002272:	04d9      	lsls	r1, r3, #19
 8002274:	6922      	ldr	r2, [r4, #16]
 8002276:	6022      	str	r2, [r4, #0]
 8002278:	d504      	bpl.n	8002284 <__sflush_r+0x78>
 800227a:	1c42      	adds	r2, r0, #1
 800227c:	d101      	bne.n	8002282 <__sflush_r+0x76>
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	b903      	cbnz	r3, 8002284 <__sflush_r+0x78>
 8002282:	6560      	str	r0, [r4, #84]	@ 0x54
 8002284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002286:	602f      	str	r7, [r5, #0]
 8002288:	b1b9      	cbz	r1, 80022ba <__sflush_r+0xae>
 800228a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800228e:	4299      	cmp	r1, r3
 8002290:	d002      	beq.n	8002298 <__sflush_r+0x8c>
 8002292:	4628      	mov	r0, r5
 8002294:	f7ff fbf2 	bl	8001a7c <_free_r>
 8002298:	2300      	movs	r3, #0
 800229a:	6363      	str	r3, [r4, #52]	@ 0x34
 800229c:	e00d      	b.n	80022ba <__sflush_r+0xae>
 800229e:	2301      	movs	r3, #1
 80022a0:	4628      	mov	r0, r5
 80022a2:	47b0      	blx	r6
 80022a4:	4602      	mov	r2, r0
 80022a6:	1c50      	adds	r0, r2, #1
 80022a8:	d1c9      	bne.n	800223e <__sflush_r+0x32>
 80022aa:	682b      	ldr	r3, [r5, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0c6      	beq.n	800223e <__sflush_r+0x32>
 80022b0:	2b1d      	cmp	r3, #29
 80022b2:	d001      	beq.n	80022b8 <__sflush_r+0xac>
 80022b4:	2b16      	cmp	r3, #22
 80022b6:	d11e      	bne.n	80022f6 <__sflush_r+0xea>
 80022b8:	602f      	str	r7, [r5, #0]
 80022ba:	2000      	movs	r0, #0
 80022bc:	e022      	b.n	8002304 <__sflush_r+0xf8>
 80022be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	e01b      	b.n	80022fe <__sflush_r+0xf2>
 80022c6:	690f      	ldr	r7, [r1, #16]
 80022c8:	2f00      	cmp	r7, #0
 80022ca:	d0f6      	beq.n	80022ba <__sflush_r+0xae>
 80022cc:	0793      	lsls	r3, r2, #30
 80022ce:	680e      	ldr	r6, [r1, #0]
 80022d0:	bf08      	it	eq
 80022d2:	694b      	ldreq	r3, [r1, #20]
 80022d4:	600f      	str	r7, [r1, #0]
 80022d6:	bf18      	it	ne
 80022d8:	2300      	movne	r3, #0
 80022da:	eba6 0807 	sub.w	r8, r6, r7
 80022de:	608b      	str	r3, [r1, #8]
 80022e0:	f1b8 0f00 	cmp.w	r8, #0
 80022e4:	dde9      	ble.n	80022ba <__sflush_r+0xae>
 80022e6:	6a21      	ldr	r1, [r4, #32]
 80022e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80022ea:	4643      	mov	r3, r8
 80022ec:	463a      	mov	r2, r7
 80022ee:	4628      	mov	r0, r5
 80022f0:	47b0      	blx	r6
 80022f2:	2800      	cmp	r0, #0
 80022f4:	dc08      	bgt.n	8002308 <__sflush_r+0xfc>
 80022f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022fe:	81a3      	strh	r3, [r4, #12]
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002308:	4407      	add	r7, r0
 800230a:	eba8 0800 	sub.w	r8, r8, r0
 800230e:	e7e7      	b.n	80022e0 <__sflush_r+0xd4>
 8002310:	dfbffffe 	.word	0xdfbffffe

08002314 <_fflush_r>:
 8002314:	b538      	push	{r3, r4, r5, lr}
 8002316:	690b      	ldr	r3, [r1, #16]
 8002318:	4605      	mov	r5, r0
 800231a:	460c      	mov	r4, r1
 800231c:	b913      	cbnz	r3, 8002324 <_fflush_r+0x10>
 800231e:	2500      	movs	r5, #0
 8002320:	4628      	mov	r0, r5
 8002322:	bd38      	pop	{r3, r4, r5, pc}
 8002324:	b118      	cbz	r0, 800232e <_fflush_r+0x1a>
 8002326:	6a03      	ldr	r3, [r0, #32]
 8002328:	b90b      	cbnz	r3, 800232e <_fflush_r+0x1a>
 800232a:	f7ff f9a7 	bl	800167c <__sinit>
 800232e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f3      	beq.n	800231e <_fflush_r+0xa>
 8002336:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002338:	07d0      	lsls	r0, r2, #31
 800233a:	d404      	bmi.n	8002346 <_fflush_r+0x32>
 800233c:	0599      	lsls	r1, r3, #22
 800233e:	d402      	bmi.n	8002346 <_fflush_r+0x32>
 8002340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002342:	f7ff fb92 	bl	8001a6a <__retarget_lock_acquire_recursive>
 8002346:	4628      	mov	r0, r5
 8002348:	4621      	mov	r1, r4
 800234a:	f7ff ff5f 	bl	800220c <__sflush_r>
 800234e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002350:	07da      	lsls	r2, r3, #31
 8002352:	4605      	mov	r5, r0
 8002354:	d4e4      	bmi.n	8002320 <_fflush_r+0xc>
 8002356:	89a3      	ldrh	r3, [r4, #12]
 8002358:	059b      	lsls	r3, r3, #22
 800235a:	d4e1      	bmi.n	8002320 <_fflush_r+0xc>
 800235c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800235e:	f7ff fb85 	bl	8001a6c <__retarget_lock_release_recursive>
 8002362:	e7dd      	b.n	8002320 <_fflush_r+0xc>

08002364 <__swhatbuf_r>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	460c      	mov	r4, r1
 8002368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800236c:	2900      	cmp	r1, #0
 800236e:	b096      	sub	sp, #88	@ 0x58
 8002370:	4615      	mov	r5, r2
 8002372:	461e      	mov	r6, r3
 8002374:	da0d      	bge.n	8002392 <__swhatbuf_r+0x2e>
 8002376:	89a3      	ldrh	r3, [r4, #12]
 8002378:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800237c:	f04f 0100 	mov.w	r1, #0
 8002380:	bf14      	ite	ne
 8002382:	2340      	movne	r3, #64	@ 0x40
 8002384:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002388:	2000      	movs	r0, #0
 800238a:	6031      	str	r1, [r6, #0]
 800238c:	602b      	str	r3, [r5, #0]
 800238e:	b016      	add	sp, #88	@ 0x58
 8002390:	bd70      	pop	{r4, r5, r6, pc}
 8002392:	466a      	mov	r2, sp
 8002394:	f000 f878 	bl	8002488 <_fstat_r>
 8002398:	2800      	cmp	r0, #0
 800239a:	dbec      	blt.n	8002376 <__swhatbuf_r+0x12>
 800239c:	9901      	ldr	r1, [sp, #4]
 800239e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80023a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80023a6:	4259      	negs	r1, r3
 80023a8:	4159      	adcs	r1, r3
 80023aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ae:	e7eb      	b.n	8002388 <__swhatbuf_r+0x24>

080023b0 <__smakebuf_r>:
 80023b0:	898b      	ldrh	r3, [r1, #12]
 80023b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023b4:	079d      	lsls	r5, r3, #30
 80023b6:	4606      	mov	r6, r0
 80023b8:	460c      	mov	r4, r1
 80023ba:	d507      	bpl.n	80023cc <__smakebuf_r+0x1c>
 80023bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80023c0:	6023      	str	r3, [r4, #0]
 80023c2:	6123      	str	r3, [r4, #16]
 80023c4:	2301      	movs	r3, #1
 80023c6:	6163      	str	r3, [r4, #20]
 80023c8:	b003      	add	sp, #12
 80023ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023cc:	ab01      	add	r3, sp, #4
 80023ce:	466a      	mov	r2, sp
 80023d0:	f7ff ffc8 	bl	8002364 <__swhatbuf_r>
 80023d4:	9f00      	ldr	r7, [sp, #0]
 80023d6:	4605      	mov	r5, r0
 80023d8:	4639      	mov	r1, r7
 80023da:	4630      	mov	r0, r6
 80023dc:	f7ff fbba 	bl	8001b54 <_malloc_r>
 80023e0:	b948      	cbnz	r0, 80023f6 <__smakebuf_r+0x46>
 80023e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e6:	059a      	lsls	r2, r3, #22
 80023e8:	d4ee      	bmi.n	80023c8 <__smakebuf_r+0x18>
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	f043 0302 	orr.w	r3, r3, #2
 80023f2:	81a3      	strh	r3, [r4, #12]
 80023f4:	e7e2      	b.n	80023bc <__smakebuf_r+0xc>
 80023f6:	89a3      	ldrh	r3, [r4, #12]
 80023f8:	6020      	str	r0, [r4, #0]
 80023fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fe:	81a3      	strh	r3, [r4, #12]
 8002400:	9b01      	ldr	r3, [sp, #4]
 8002402:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002406:	b15b      	cbz	r3, 8002420 <__smakebuf_r+0x70>
 8002408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800240c:	4630      	mov	r0, r6
 800240e:	f000 f84d 	bl	80024ac <_isatty_r>
 8002412:	b128      	cbz	r0, 8002420 <__smakebuf_r+0x70>
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	81a3      	strh	r3, [r4, #12]
 8002420:	89a3      	ldrh	r3, [r4, #12]
 8002422:	431d      	orrs	r5, r3
 8002424:	81a5      	strh	r5, [r4, #12]
 8002426:	e7cf      	b.n	80023c8 <__smakebuf_r+0x18>

08002428 <_raise_r>:
 8002428:	291f      	cmp	r1, #31
 800242a:	b538      	push	{r3, r4, r5, lr}
 800242c:	4605      	mov	r5, r0
 800242e:	460c      	mov	r4, r1
 8002430:	d904      	bls.n	800243c <_raise_r+0x14>
 8002432:	2316      	movs	r3, #22
 8002434:	6003      	str	r3, [r0, #0]
 8002436:	f04f 30ff 	mov.w	r0, #4294967295
 800243a:	bd38      	pop	{r3, r4, r5, pc}
 800243c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800243e:	b112      	cbz	r2, 8002446 <_raise_r+0x1e>
 8002440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002444:	b94b      	cbnz	r3, 800245a <_raise_r+0x32>
 8002446:	4628      	mov	r0, r5
 8002448:	f000 f852 	bl	80024f0 <_getpid_r>
 800244c:	4622      	mov	r2, r4
 800244e:	4601      	mov	r1, r0
 8002450:	4628      	mov	r0, r5
 8002452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002456:	f000 b839 	b.w	80024cc <_kill_r>
 800245a:	2b01      	cmp	r3, #1
 800245c:	d00a      	beq.n	8002474 <_raise_r+0x4c>
 800245e:	1c59      	adds	r1, r3, #1
 8002460:	d103      	bne.n	800246a <_raise_r+0x42>
 8002462:	2316      	movs	r3, #22
 8002464:	6003      	str	r3, [r0, #0]
 8002466:	2001      	movs	r0, #1
 8002468:	e7e7      	b.n	800243a <_raise_r+0x12>
 800246a:	2100      	movs	r1, #0
 800246c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002470:	4620      	mov	r0, r4
 8002472:	4798      	blx	r3
 8002474:	2000      	movs	r0, #0
 8002476:	e7e0      	b.n	800243a <_raise_r+0x12>

08002478 <raise>:
 8002478:	4b02      	ldr	r3, [pc, #8]	@ (8002484 <raise+0xc>)
 800247a:	4601      	mov	r1, r0
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	f7ff bfd3 	b.w	8002428 <_raise_r>
 8002482:	bf00      	nop
 8002484:	20000014 	.word	0x20000014

08002488 <_fstat_r>:
 8002488:	b538      	push	{r3, r4, r5, lr}
 800248a:	4d07      	ldr	r5, [pc, #28]	@ (80024a8 <_fstat_r+0x20>)
 800248c:	2300      	movs	r3, #0
 800248e:	4604      	mov	r4, r0
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	602b      	str	r3, [r5, #0]
 8002496:	f7fe fec6 	bl	8001226 <_fstat>
 800249a:	1c43      	adds	r3, r0, #1
 800249c:	d102      	bne.n	80024a4 <_fstat_r+0x1c>
 800249e:	682b      	ldr	r3, [r5, #0]
 80024a0:	b103      	cbz	r3, 80024a4 <_fstat_r+0x1c>
 80024a2:	6023      	str	r3, [r4, #0]
 80024a4:	bd38      	pop	{r3, r4, r5, pc}
 80024a6:	bf00      	nop
 80024a8:	2000026c 	.word	0x2000026c

080024ac <_isatty_r>:
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	4d06      	ldr	r5, [pc, #24]	@ (80024c8 <_isatty_r+0x1c>)
 80024b0:	2300      	movs	r3, #0
 80024b2:	4604      	mov	r4, r0
 80024b4:	4608      	mov	r0, r1
 80024b6:	602b      	str	r3, [r5, #0]
 80024b8:	f7ff f818 	bl	80014ec <_isatty>
 80024bc:	1c43      	adds	r3, r0, #1
 80024be:	d102      	bne.n	80024c6 <_isatty_r+0x1a>
 80024c0:	682b      	ldr	r3, [r5, #0]
 80024c2:	b103      	cbz	r3, 80024c6 <_isatty_r+0x1a>
 80024c4:	6023      	str	r3, [r4, #0]
 80024c6:	bd38      	pop	{r3, r4, r5, pc}
 80024c8:	2000026c 	.word	0x2000026c

080024cc <_kill_r>:
 80024cc:	b538      	push	{r3, r4, r5, lr}
 80024ce:	4d07      	ldr	r5, [pc, #28]	@ (80024ec <_kill_r+0x20>)
 80024d0:	2300      	movs	r3, #0
 80024d2:	4604      	mov	r4, r0
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	602b      	str	r3, [r5, #0]
 80024da:	f000 f81b 	bl	8002514 <_kill>
 80024de:	1c43      	adds	r3, r0, #1
 80024e0:	d102      	bne.n	80024e8 <_kill_r+0x1c>
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	b103      	cbz	r3, 80024e8 <_kill_r+0x1c>
 80024e6:	6023      	str	r3, [r4, #0]
 80024e8:	bd38      	pop	{r3, r4, r5, pc}
 80024ea:	bf00      	nop
 80024ec:	2000026c 	.word	0x2000026c

080024f0 <_getpid_r>:
 80024f0:	f7fe be76 	b.w	80011e0 <_getpid>

080024f4 <_sbrk_r>:
 80024f4:	b538      	push	{r3, r4, r5, lr}
 80024f6:	4d06      	ldr	r5, [pc, #24]	@ (8002510 <_sbrk_r+0x1c>)
 80024f8:	2300      	movs	r3, #0
 80024fa:	4604      	mov	r4, r0
 80024fc:	4608      	mov	r0, r1
 80024fe:	602b      	str	r3, [r5, #0]
 8002500:	f7fe fd1a 	bl	8000f38 <_sbrk>
 8002504:	1c43      	adds	r3, r0, #1
 8002506:	d102      	bne.n	800250e <_sbrk_r+0x1a>
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	b103      	cbz	r3, 800250e <_sbrk_r+0x1a>
 800250c:	6023      	str	r3, [r4, #0]
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	2000026c 	.word	0x2000026c

08002514 <_kill>:
 8002514:	4b02      	ldr	r3, [pc, #8]	@ (8002520 <_kill+0xc>)
 8002516:	2258      	movs	r2, #88	@ 0x58
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f04f 30ff 	mov.w	r0, #4294967295
 800251e:	4770      	bx	lr
 8002520:	2000026c 	.word	0x2000026c

08002524 <_exit>:
 8002524:	e7fe      	b.n	8002524 <_exit>
	...

08002528 <_init>:
 8002528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252a:	bf00      	nop
 800252c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252e:	bc08      	pop	{r3}
 8002530:	469e      	mov	lr, r3
 8002532:	4770      	bx	lr

08002534 <_fini>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr
